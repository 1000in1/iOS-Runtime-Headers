/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthUI.framework/HealthUI
 */

@interface HKHorizontalSingleLineSeries : HKGraphSeries <HKAxisLabelDataSource> {
    UIColor * _baseColor;
    double  _lineWidth;
    double  _markRadius;
    double  _selectedLineWidth;
    UIImage * _selectedPointMarkerImage;
    BOOL  _shouldConnectPoints;
    double  _topInsetPercentage;
}

@property (nonatomic, retain) UIColor *baseColor;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (nonatomic) double lineWidth;
@property (nonatomic) double markRadius;
@property (nonatomic) double selectedLineWidth;
@property (nonatomic, retain) UIImage *selectedPointMarkerImage;
@property (nonatomic) BOOL shouldConnectPoints;
@property (readonly) Class superclass;
@property (nonatomic) double topInsetPercentage;

- (void).cxx_destruct;
- (id)baseColor;
- (id)coordinatesForBlock:(id)arg1 blockPath:(struct { int x1; int x2; })arg2 xAxis:(id)arg3 yAxis:(id)arg4;
- (float)distanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)drawSeriesWithBlockCoordinates:(id)arg1 axisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 zoomLevelConfiguration:(id)arg3 pointTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 renderContext:(struct CGContext { }*)arg5 secondaryRenderContext:(id)arg6;
- (id)init;
- (id)labelsForChartRange:(struct HKRange { double x1; double x2; })arg1 zoomScale:(float)arg2;
- (float)lineWidth;
- (float)markRadius;
- (struct CGPoint { double x1; double x2; })renderPositionForLabel:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 zoomScale:(float)arg3 contentOffset:(struct CGPoint { double x1; double x2; })arg4 constantOffset:(float)arg5 isHorizontal:(BOOL)arg6;
- (float)selectedLineWidth;
- (id)selectedPointMarkerImage;
- (void)setBaseColor:(id)arg1;
- (void)setLineWidth:(float)arg1;
- (void)setMarkRadius:(float)arg1;
- (void)setSelectedLineWidth:(float)arg1;
- (void)setSelectedPointMarkerImage:(id)arg1;
- (void)setShouldConnectPoints:(BOOL)arg1;
- (void)setTopInsetPercentage:(float)arg1;
- (void)setYAxis:(id)arg1;
- (BOOL)shouldConnectPoints;
- (float)topInsetPercentage;
- (float)xAxisDistanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (float)yAxisDifferenceToPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (float)yCoordinateForLevel:(int)arg1 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;

@end
