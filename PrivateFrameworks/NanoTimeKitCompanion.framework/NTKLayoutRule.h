/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NanoTimeKitCompanion.framework/NanoTimeKitCompanion
 */

@interface NTKLayoutRule : NSObject <NSCopying> {
    BOOL  _clipsToReferenceFrame;
    int  _horizontalLayout;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _referenceFrame;
    int  _verticalLayout;
}

@property (nonatomic) BOOL clipsToReferenceFrame;
@property (nonatomic) int horizontalLayout;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } maximumSize;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } referenceFrame;
@property (nonatomic) int verticalLayout;

+ (id)layoutRuleWithReferenceFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 horizontalLayout:(int)arg2 verticalLayout:(int)arg3;
+ (id)layoutRuleWithReferenceFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 horizontalLayout:(int)arg2 verticalLayout:(int)arg3 clip:(BOOL)arg4;

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })calculateLayoutFrameForBoundsSize:(struct CGSize { double x1; double x2; })arg1;
- (float)calculateLayoutFrameHeightForBoundsSize:(struct CGSize { double x1; double x2; })arg1;
- (float)calculateLayoutFrameWidthForBoundsSize:(struct CGSize { double x1; double x2; })arg1;
- (float)calculateLayoutFrameXOriginForBoundsSize:(struct CGSize { double x1; double x2; })arg1;
- (float)calculateLayoutFrameYOriginForBoundsSize:(struct CGSize { double x1; double x2; })arg1;
- (BOOL)clipsToReferenceFrame;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (unsigned int)hash;
- (int)horizontalLayout;
- (BOOL)isEqual:(id)arg1;
- (id)layoutRuleByConvertingToCoordinateSpaceWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })maximumSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })referenceFrame;
- (void)setClipsToReferenceFrame:(BOOL)arg1;
- (void)setHorizontalLayout:(int)arg1;
- (void)setReferenceFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setVerticalLayout:(int)arg1;
- (void)validate;
- (int)verticalLayout;

@end
