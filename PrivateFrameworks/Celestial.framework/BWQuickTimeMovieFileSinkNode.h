/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

@interface BWQuickTimeMovieFileSinkNode : BWFileSinkNode {
    struct { 
        int value; 
        int timescale; 
        unsigned int flags; 
        int epoch; 
    }  _adjustedMaxFileDuration;
    unsigned int  _adjustedMaxFileSize;
    unsigned int  _adjustedMinFreeDiskSpaceLimit;
    BOOL  _atLeastOneFragmentIsWritten;
    struct OpaqueCMByteStream { } * _byteStream;
    struct { 
        int value; 
        int timescale; 
        unsigned int flags; 
        int epoch; 
    }  _checkDiskSpaceAtThisDuration;
    struct { 
        int value; 
        int timescale; 
        unsigned int flags; 
        int epoch; 
    }  _currFileDuration;
    unsigned int  _currFileSize;
    struct AudioBufferList { unsigned int x1; struct AudioBuffer { unsigned int x_2_1_1; unsigned int x_2_1_2; void *x_2_1_3; } x2[1]; } * _debugABL;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        unsigned int mFormatID; 
        unsigned int mFormatFlags; 
        unsigned int mBytesPerPacket; 
        unsigned int mFramesPerPacket; 
        unsigned int mBytesPerFrame; 
        unsigned int mChannelsPerFrame; 
        unsigned int mBitsPerChannel; 
        unsigned int mReserved; 
    }  _debugASBD;
    BOOL  _debugAudio;
    struct { 
        int value; 
        int timescale; 
        unsigned int flags; 
        int epoch; 
    }  _debugDurationForFailOfDiskSpaceTest;
    BOOL  _didBeginSession;
    BOOL  _didBeginWriting;
    BOOL * _expectingToSeeSamplesForInput;
    BOOL * _finalDurationNeedsToBeWrittenForTrack;
    BWIrisMovieInfo * _firstIrisMovieInfo;
    struct OpaqueFigFormatWriter { } * _formatWriter;
    BOOL  _haveDebugASBD;
    BOOL * _haveSeenSamplesForTrack;
    BWIrisMovieGenerator * _irisMovieGenerator;
    BOOL  _irisMovieProcessingSuspended;
    BOOL  _irisSampleReferenceMoviesEnabled;
    int  _irisStillImageTimeTrackID;
    int  _irisStillImageTimeTrackTimeScale;
    unsigned int  _irisTerminationStatus;
    BWIrisMovieGenerator * _lastRecordingIrisMovieGenerator;
    unsigned int  _masterInputIndex;
    int  _masterInputTimeScale;
    struct { 
        int value; 
        int timescale; 
        unsigned int flags; 
        int epoch; 
    }  _maxFileDuration;
    unsigned int  _maxFileSize;
    double  _maxVideoFrameRate;
    unsigned int  _minFreeDiskSpaceLimit;
    NSArray * _movieLevelMetadata;
    BOOL  _needToDeMoof;
    struct { 
        int value; 
        int timescale; 
        unsigned int flags; 
        int epoch; 
    }  _nextTimeToReturnFileSize;
    unsigned int  _numAudioTracks;
    unsigned int  _numInputs;
    unsigned int  _numVideoTracks;
    char * _parentPath;
    NSMutableArray * _pendingIrisRefMovieRequests;
    struct OpaqueFigSimpleMutex { } * _propertyMutex;
    BOOL  _recordingIsForFrontCamera;
    BOOL  _recordingIsSubjectToDiskSpaceQuota;
    int  _recordingState;
    FigCaptureMovieFileRecordingSettings * _settings;
    NSArray * _stagingQueues;
    struct { 
        int value; 
        int timescale; 
        unsigned int flags; 
        int epoch; 
    }  _startingPTS;
    NSArray * _structuralDependentTrackReferenceListForMetadataInputs;
    NSObject<OS_dispatch_queue> * _thumbnailGenerationDispatchQueue;
    struct __IOSurface { } * _thumbnailSurface;
    int * _trackIDs;
    NSArray * _trackReferenceListForMetadataInputs;
}

@property (nonatomic) BOOL irisMovieProcessingSuspended;
@property (nonatomic) double maxVideoFrameRate;
@property (nonatomic, copy) NSArray *movieLevelMetadata;
@property (nonatomic, copy) NSArray *structuralDependentTrackReferenceListForMetadataInputs;
@property (nonatomic, copy) NSArray *trackReferenceListForMetadataInputs;

+ (void)initialize;

- (long)_adjustRecordingLimitsForMovieTimeScale:(int)arg1;
- (void)_buildIrisRefMovieGeneratorAndWriteFirstIrisAsRefMovie;
- (long)_checkFreeSpace;
- (void)_debugAudioUsingSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)_determineWhichInputsWeExpectToSeeSamplesFor;
- (void)_doEndRecordingAtTime:(struct { int x1; int x2; unsigned int x3; int x4; })arg1 earlyTerminationErrCode:(long)arg2;
- (long)_doStartRecordingAtTime:(struct { int x1; int x2; unsigned int x3; int x4; })arg1 withSettings:(id)arg2 thumbnailSourcePixelBuffer:(struct __CVBuffer { }*)arg3 sensorVideoPort:(struct __CFString { }*)arg4;
- (BOOL)_driveStateMachineWithBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2 sampleBufferAlreadyAtHeadOfQueue:(BOOL)arg3;
- (void)_driveStateMachineWithMediaBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInputIndex:(unsigned int)arg2 sampleBufferAlreadyAtHeadOfQueue:(BOOL)arg3;
- (BOOL)_driveStateMachineWithPauseMarkerBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInputIndex:(unsigned int)arg2 sampleBufferAlreadyAtHeadOfQueue:(BOOL)arg3;
- (BOOL)_driveStateMachineWithResumeMarkerBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInputIndex:(unsigned int)arg2 sampleBufferAlreadyAtHeadOfQueue:(BOOL)arg3;
- (BOOL)_driveStateMachineWithStartMarkerBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInputIndex:(unsigned int)arg2 sampleBufferAlreadyAtHeadOfQueue:(BOOL)arg3;
- (BOOL)_driveStateMachineWithStopMarkerBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInputIndex:(unsigned int)arg2 sampleBufferAlreadyAtHeadOfQueue:(BOOL)arg3;
- (struct { int x1; int x2; unsigned int x3; int x4; })_findMarkers:(struct __CFString { }*)arg1;
- (struct { int x1; int x2; unsigned int x3; int x4; })_findStartMarkersWithMatchedStagedSetting:(id*)arg1 thumbnailSourcePixelBuffer:(struct __CVBuffer {}**)arg2 sensorVideoPort:(const struct __CFString {}**)arg3;
- (void)_finishIrisMovieGenerationForLastRecordingIfNeeded;
- (void)_forceEarlyTerminationWithErrorCode:(long)arg1;
- (unsigned int)_getCurrentFileSize:(BOOL)arg1;
- (void)_handleFormatWriterDidWriteFragmentNotification;
- (void)_moveOrDeleteTemporaryIrisMovie:(id)arg1 recordingSucceeded:(BOOL)arg2;
- (void)_preprocessingForFirstAudioBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInputIndex:(unsigned int)arg2;
- (void)_preprocessingForFirstMetadataBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInputIndex:(unsigned int)arg2;
- (void)_preprocessingForFirstVideoBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInputIndex:(unsigned int)arg2;
- (void)_printBufferEvent:(struct opaqueCMSampleBuffer { }*)arg1 forNodeInputIndex:(unsigned int)arg2 eventName:(id)arg3;
- (long)_startUpFormatWriterAtTime:(struct { int x1; int x2; unsigned int x3; int x4; })arg1 withSettings:(id)arg2;
- (id)_validTrackReferencesForReferenceInputIndexes:(id)arg1;
- (long)_verifyMovieTiming:(id)arg1;
- (void)_writeBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInputIndex:(unsigned int)arg2;
- (void)_writeIrisRefMovieWithInfo:(id)arg1;
- (long)_writeStillImageTimeMetadataSampleForCaptureTime:(struct { int x1; int x2; unsigned int x3; int x4; })arg1 toTrackWithID:(int)arg2 usingTrackTimeScale:(int)arg3;
- (void)configurationWithID:(int)arg1 updatedFormat:(id)arg2 didBecomeLiveForInput:(id)arg3;
- (void)dealloc;
- (void)didReachEndOfDataForInput:(id)arg1;
- (void)handleIrisReferenceMovieRequest:(id)arg1 forInput:(id)arg2;
- (id)init;
- (id)initWithNumberOfVideoInputs:(unsigned int)arg1 numberOfAudioInputs:(unsigned int)arg2 numberOfMetadataInputs:(unsigned int)arg3;
- (BOOL)irisMovieProcessingSuspended;
- (BOOL)irisSampleReferenceMoviesEnabled;
- (struct { int x1; int x2; unsigned int x3; int x4; })lastFileDuration;
- (unsigned int)lastFileSize;
- (float)maxVideoFrameRate;
- (id)movieLevelMetadata;
- (id)nodeSubType;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (void)setIrisMovieProcessingSuspended:(BOOL)arg1;
- (void)setIrisSampleReferenceMoviesEnabled:(BOOL)arg1;
- (void)setMaxVideoFrameRate:(float)arg1;
- (void)setMovieLevelMetadata:(id)arg1;
- (void)setStructuralDependentTrackReferenceListForMetadataInputs:(id)arg1;
- (void)setTrackReferenceListForMetadataInputs:(id)arg1;
- (id)structuralDependentTrackReferenceListForMetadataInputs;
- (id)trackReferenceListForMetadataInputs;

@end
