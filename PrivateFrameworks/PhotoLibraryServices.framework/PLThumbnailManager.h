/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices
 */

@class <PLThumbPersistenceManager>, NSArray, NSDictionary, NSIndexSet, NSLock, NSMutableDictionary, NSMutableSet, PLLargeImageLoader, PLPhotoLibrary;

@interface PLThumbnailManager : NSObject {
    NSArray *_changedPhotos;
    NSDictionary *_changedPhotosMap;
    PLLargeImageLoader *_largeImageLoaderFilledHalfScreen;
    PLLargeImageLoader *_largeImageLoaderFilledScreen;
    PLLargeImageLoader *_largeImageLoaderFullScreen;
    PLLargeImageLoader *_largeImageLoaderFullSize;
    <PLThumbPersistenceManager> *_lastUsedThumbManager;
    int _lastUsedThumbManagerFormat;
    NSLock *_lock;
    id _observerToken;
    NSIndexSet *_occupiedIndexes;
    PLPhotoLibrary *_photoLibrary;
    NSMutableSet *_previouslyRequestedThumbnailFixOIDs;
    NSMutableSet *_requestedThumbnailFixAssets;
    NSMutableDictionary *_thumbManagersByFormat;
    struct _FigCascadeContext { } *_unicornContextLandscape;
    struct _FigCascadeContext { } *_unicornContextPortrait;
}

@property(retain) id observerToken;
@property PLPhotoLibrary * photoLibrary;
@property(readonly) NSMutableDictionary * thumbManagersByFormat;

+ (id)_allPossibleThumbnailFormats;
+ (void)addRebuildThumbnailsRequest;
+ (id)cameraPreviewWellAssetUUID;
+ (id)cameraPreviewWellImage;
+ (id)cameraPreviewWellImageFileURL;
+ (id)cameraPreviewWellImageQueue;
+ (id)defaultThumbnailsDirectory;
+ (id)defaultThumbnailsDirectoryV2;
+ (void)handleRebuildThumbnailRequestPersistentFailure;
+ (BOOL)hasExceededRebuildThumbnailRequestLimit;
+ (BOOL)hasObsoleteThumbnailTables;
+ (BOOL)hasRebuildThumbnailsRequest;
+ (BOOL)isMissingThumbnailTables;
+ (BOOL)isRebuildingThumbnails;
+ (int)largestNonJPEGThumbnailFormat;
+ (void)rebuildAllMissingThumbnails;
+ (void)removeObsoleteMetadata;
+ (void)removeRebuildThumbnailsRequest:(const char *)arg1;
+ (void)resetThumbnails;
+ (void)saveCameraPreviewWellImage:(struct CGImage { }*)arg1 uuid:(id)arg2;
+ (void)saveCameraPreviewWellImageForAsset:(id)arg1;
+ (BOOL)shouldUseLargerNonJPEGThumbnailFormat;
+ (id)supportedThumbnailFormats;
+ (int)thumbnailFormat;
+ (int)thumbnailVersion;
+ (int)thumbnailVersionCurrent;
+ (BOOL)useImageTableForFormat:(int)arg1;

- (id)_anyImageTable;
- (id)_dataForAsset:(id)arg1 format:(int)arg2 width:(int*)arg3 height:(int*)arg4 bytesPerRow:(int*)arg5 dataWidth:(int*)arg6 dataHeight:(int*)arg7 imageDataOffset:(int*)arg8 imageDataFormat:(int*)arg9;
- (id)_dataForInFlightAsset:(id)arg1 format:(int)arg2 width:(int*)arg3 height:(int*)arg4 bytesPerRow:(int*)arg5 dataWidth:(int*)arg6 dataHeight:(int*)arg7 imageDataOffset:(int*)arg8 imageDataFormat:(int*)arg9;
- (void)_horse_setThumbnailsForPhoto:(id)arg1 withImage:(id)arg2;
- (int)_rebuildAssetThumbnailsWithLimit:(int)arg1 error:(id*)arg2;
- (id)_tableDescriptions;
- (id)_thumbManagerForFormat:(int*)arg1;
- (void)_unicorn_setThumbnailsForPhoto:(id)arg1 withImage:(id)arg2;
- (id)beginThumbnailSafePropertyUpdatesOnAsset:(id)arg1;
- (void)clearPhotoLibrary;
- (id)compactImageTables;
- (BOOL)copyThumbnailsFromAsset:(id)arg1 toAsset:(id)arg2;
- (id)dataForPhoto:(id)arg1 format:(int)arg2 width:(int*)arg3 height:(int*)arg4 bytesPerRow:(int*)arg5 dataWidth:(int*)arg6 dataHeight:(int*)arg7 imageDataOffset:(int*)arg8 allowPlaceholder:(BOOL)arg9;
- (void)dealloc;
- (void)deleteThumbnailsWithIdentifier:(id)arg1 orIndex:(unsigned int)arg2 uuid:(id)arg3;
- (void)endThumbnailSafePropertyUpdatesOnAsset:(id)arg1 withToken:(id)arg2;
- (id)initWithWeakPhotoLibrary:(id)arg1;
- (id)newImageForPhoto:(id)arg1 withFormat:(int)arg2 outImageProperties:(const struct __CFDictionary {}**)arg3 allowPlaceholder:(BOOL)arg4;
- (id)observerToken;
- (id)photoLibrary;
- (struct __CFDictionary { }*)placeholderThumbnailDataByFormatID;
- (id)preflightImageTableCompactionForPhotos:(id)arg1;
- (id)preheatItemSourceForFormat:(int)arg1;
- (void)setObserverToken:(id)arg1;
- (void)setPhotoLibrary:(id)arg1;
- (void)setThumbnails:(struct __CFDictionary { }*)arg1 forPhoto:(id)arg2;
- (void)setThumbnailsForPhoto:(id)arg1 withImage:(id)arg2;
- (id)thumbManagersByFormat;
- (id)thumbnailJPEGPathForPhoto:(id)arg1;

@end
