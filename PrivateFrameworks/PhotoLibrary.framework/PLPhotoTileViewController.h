/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <PLPhotoTileViewControllerDelegate>, NSObject<OS_dispatch_source>, PLCommentsViewController, PLExpandableImageView, PLImageScrollView, PLManagedAsset, PLPhotoTileBadgeView, PLPhotoTilePlaceholderView, PLTileContainerView, PLVideoView, UIGestureRecognizer, UIImage, UIImageView;

@interface PLPhotoTileViewController : UIViewController <UIScrollViewDelegate, UIGestureRecognizerDelegate, PLCommentsViewControllerDelegate> {
    struct CGSize { 
        float width; 
        float height; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    unsigned int _imageIsThumbnail : 1;
    unsigned int _isTVOut : 1;
    unsigned int _zooming : 1;
    unsigned int _autoZooming : 1;
    unsigned int _zoomGesturesEnabled : 1;
    unsigned int _userDidZoom : 1;
    unsigned int _ignoreZoomChange : 1;
    unsigned int _tileParentIsPageController : 1;
    unsigned int _lockedUnderCropOverlay : 1;
    unsigned int _viewDidAppear : 1;
    unsigned int _viewWillAppear : 1;
    unsigned int _didRequestFullSizeImage : 1;
    unsigned int _useZoomScaleForCropRect : 1;
    unsigned int _photoShouldBeHDRBadged : 1;
    unsigned int _HDRBadgeShouldBeHidden : 1;
    unsigned int _avalancheBadgeShouldBeHidden : 1;
    unsigned int _photoShouldBeAvalancheBadged : 1;
    unsigned int _badgeShouldBeVisible : 1;
    unsigned int _didSetHDRForModelPhoto : 1;
    unsigned int _commentsTableVisible : 1;
    BOOL _allowZoomToFill;
    PLPhotoTileBadgeView *_badgeView;
    BOOL _centerContentVertically;
    BOOL _clientIsTemporarilyWallpaper;
    PLCommentsViewController *_commentsViewController;
    PLTileContainerView *_containerView;
    } _cropOverlayRect;
    } _cropRect;
    } _cropRectBeforeDragging;
    float _cropRectZoomScale;
    id _didEndZoomingBlock;
    double _dispatchStartTime;
    double _dispatchTimeElapsed;
    NSObject<OS_dispatch_source> *_dispatchTimer;
    UIGestureRecognizer *_doubleTapGestureRecognizer;
    float _doubleTapZoomScale;
    BOOL _force1XCroppedImage;
    BOOL _forceNativeScreenScale;
    UIImageView *_gradientView;
    BOOL _hasNotedZoom;
    UIImage *_image;
    int _imageOrientation;
    } _imageSize;
    PLExpandableImageView *_imageView;
    int _lastDisplayedOrientation;
    float _minZoomScale;
    int _mode;
    PLManagedAsset *_modelPhoto;
    id _orientationDelegate;
    } _overlayInsets;
    UIImage *_pendingImage;
    BOOL _picked;
    PLPhotoTilePlaceholderView *_placeholderView;
    UIImageView *_reviewCheckmarkImageView;
    BOOL _reviewing;
    PLImageScrollView *_scrollView;
    UIGestureRecognizer *_singleTapGestureRecognizer;
    <PLPhotoTileViewControllerDelegate> *_tileDelegate;
    } _tileFrame;
    UIImage *_unscaledImage;
    BOOL _useLessThanMinZoomForZoomedOutTest;
    BOOL _userDidAdjustWallpaper;
    PLVideoView *_videoView;
    float _wallpaperLandscapeZoomScale;
    float _wallpaperPortraitZoomScale;
    float _zoomScaleBeforeZooming;
    BOOL _zoomToFillInsteadOfToFit;
    float _zoomToFillScale;
}

@property BOOL centerContentVertically;
@property(readonly) BOOL commentsTableIsVisible;
@property(readonly) PLCommentsViewController * commentsViewController;
@property BOOL force1XCroppedImage;
@property BOOL forceNativeScreenScale;
@property struct UIEdgeInsets { float x1; float x2; float x3; float x4; } overlayInsets;
@property(readonly) PLManagedAsset * photo;
@property BOOL picked;
@property BOOL reviewing;
@property(retain) UIImage * thumbnailImage;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } tileFrame;
@property(retain) UIImage * unscaledImage;

+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 image:(id)arg2 allowZoomToFill:(BOOL)arg3 mode:(int)arg4;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 imageRef:(struct CGImage { }*)arg2 imageOrientation:(int)arg3 allowZoomToFill:(BOOL)arg4 mode:(int)arg5;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 modelPhoto:(id)arg2 mode:(int)arg3;
+ (BOOL)shouldShowPlaceholderForAsset:(id)arg1;
+ (struct CGSize { float x1; float x2; })tileSize;
+ (struct CGSize { float x1; float x2; })tvOutTileSize;

- (void)_adjustScrollViewContentOffsetForInsets;
- (void)_adjustZoomForEnteringMode:(BOOL)arg1;
- (float)_calculateZoomScale:(BOOL)arg1 inView:(id)arg2;
- (void)_centerImageInScrollView;
- (BOOL)_clientIsWallpaper;
- (void)_configureViews;
- (void)_handleDoubleTap:(id)arg1;
- (void)_handleSingleTap:(id)arg1;
- (int)_imageOrientation;
- (void)_installSubview:(id)arg1;
- (id)_newOriginalImageForPickerFromCachedData;
- (void)_performDidEndZoomBlock;
- (void)_repositionBadgeView;
- (void)_requestFullSizeImage;
- (void)_resetZoomCommon;
- (void)_setDefaultZoomScale;
- (void)_setDidEndZoomingBlock:(id)arg1;
- (void)_setImage:(id)arg1 isThumbnail:(BOOL)arg2 preserveFrame:(BOOL)arg3;
- (void)_setPhoto:(id)arg1;
- (void)_setupBadgeView;
- (void)_setupReviewCheckmark;
- (void)_showBadgeViewIfAppropriate;
- (void)_teardownDispatchTimer;
- (void)_updateAggdKeys;
- (void)_updateContentInset;
- (void)_updateModelPhotoWithImage:(id)arg1;
- (void)_updatePlaceholderViewAnimated:(BOOL)arg1;
- (void)_updateReviewCheckmark;
- (void)_viewWillMoveToSuperView:(id)arg1;
- (BOOL)allowsEditing;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (BOOL)centerContentVertically;
- (void)commentsControllerDidDisplayUnreadComment:(id)arg1;
- (void)commentsControllerDidExitEditMode:(id)arg1;
- (void)commentsControllerInactiveAreaWasTapped:(id)arg1;
- (void)commentsControllerWillBeginScrolling:(id)arg1;
- (void)commentsControllerWillEnterEditMode:(id)arg1;
- (BOOL)commentsTableIsVisible;
- (id)commentsView;
- (id)commentsViewController;
- (float)currentToDefaultZoomRatio;
- (float)currentToMinZoomRatio;
- (void)dealloc;
- (float)defaultZoomScale;
- (id)description;
- (id)dictionaryWithCroppedImageForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 minimalCropDimension:(float)arg2 withOptions:(int)arg3;
- (BOOL)didRequestFullSizeImage;
- (void)didRotateFromInterfaceOrientation:(int)arg1;
- (void)ensureFullSizeImageLoaded;
- (id)expandableImageView;
- (BOOL)force1XCroppedImage;
- (BOOL)forceNativeScreenScale;
- (void)forceZoomingGesturesEnabled;
- (BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (BOOL)gesturesEnabled;
- (BOOL)hasFullSizeImage;
- (void)hideContentView;
- (id)image;
- (int)imageOrientation;
- (id)imageView;
- (id)init;
- (id)initForPageController;
- (id)initWithPhoto:(id)arg1 image:(id)arg2 frame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 isThumbnail:(BOOL)arg4 imageOrientation:(int)arg5 allowZoomToFill:(BOOL)arg6 mode:(int)arg7;
- (id)initWithPhoto:(id)arg1 thumbnailImage:(id)arg2 size:(struct CGSize { float x1; float x2; })arg3;
- (void)initializeCommentsTable;
- (void)installVideoOverlay:(id)arg1;
- (BOOL)isTVOut;
- (BOOL)isZoomedOut;
- (void)loadView;
- (float)minRotatedScale;
- (float)minZoomScale;
- (id)newCGImageBackedUIImage;
- (id)newImageWithCropRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 minimalCropDimension:(float)arg2 croppedImageData:(id*)arg3 fullScreenImageData:(id*)arg4 fullScreenImage:(struct CGImage {}**)arg5 imageCropRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg6 intersectCropWithFullRect:(BOOL)arg7;
- (void)noteParentViewControllerDidDisappear;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })overlayInsets;
- (id)photo;
- (BOOL)photoShouldHaveAvalancheBadge;
- (BOOL)photoShouldHaveHDRBadge;
- (BOOL)picked;
- (void)refreshTileWithFullScreenImage:(id)arg1;
- (void)resetZoom;
- (BOOL)reviewing;
- (struct CGSize { float x1; float x2; })scrollView:(id)arg1 contentSizeForZoomScale:(float)arg2 withProposedSize:(struct CGSize { float x1; float x2; })arg3;
- (id)scrollView;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(float)arg3;
- (void)scrollViewDidZoom:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)setAllowsZoomToFill:(BOOL)arg1;
- (void)setAvalancheBadgesHidden:(BOOL)arg1;
- (void)setBadgeVisible:(BOOL)arg1 animated:(BOOL)arg2;
- (void)setBadgeVisible:(BOOL)arg1;
- (void)setCenterContentVertically:(BOOL)arg1;
- (void)setClientIsWallpaper:(BOOL)arg1;
- (void)setCommentsTableVisibility:(BOOL)arg1 duration:(float)arg2;
- (void)setCropOverlayRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forCropRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)setForce1XCroppedImage:(BOOL)arg1;
- (void)setForceNativeScreenScale:(BOOL)arg1;
- (void)setFullSizeImage:(id)arg1;
- (void)setGesturesEnabled:(BOOL)arg1;
- (void)setHDRBadgesHidden:(BOOL)arg1;
- (void)setLockedUnderCropOverlay:(BOOL)arg1;
- (void)setOrientationDelegate:(id)arg1;
- (void)setOverlayInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setPicked:(BOOL)arg1;
- (void)setReviewing:(BOOL)arg1 animated:(BOOL)arg2;
- (void)setReviewing:(BOOL)arg1;
- (void)setTVOut:(BOOL)arg1;
- (void)setThumbnailImage:(id)arg1;
- (void)setTileDelegate:(id)arg1;
- (void)setTileFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setUnscaledImage:(id)arg1;
- (void)setVideoView:(id)arg1;
- (void)setZoomScale:(float)arg1;
- (void)setZoomingGesturesEnabled:(BOOL)arg1;
- (BOOL)shouldAutorotateToInterfaceOrientation:(int)arg1;
- (void)showContentView;
- (id)thumbnailImage;
- (id)tileDelegate;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })tileFrame;
- (BOOL)tileIsOnScreen;
- (id)unscaledImage;
- (void)updateAfterCollapse;
- (void)updateAfterZoomTransitionWithImage:(id)arg1;
- (void)updateForVisibleOverlays:(BOOL)arg1;
- (void)updateZoomScales;
- (BOOL)userDidAdjustWallpaper;
- (id)videoView;
- (void)viewDidAppear:(BOOL)arg1;
- (void)viewDidDisappear:(BOOL)arg1;
- (void)viewDidLayoutSubviews;
- (id)viewForZoomingInScrollView:(id)arg1;
- (void)viewWillAppear:(BOOL)arg1;
- (void)willAnimateRotationToInterfaceOrientation:(int)arg1 duration:(double)arg2;
- (void)willRotateToInterfaceOrientation:(int)arg1 duration:(double)arg2;
- (float)zoomToFillScale;
- (float)zoomToFitScale;
- (void)zoomToScale:(float)arg1 completionBlock:(id)arg2;

@end
