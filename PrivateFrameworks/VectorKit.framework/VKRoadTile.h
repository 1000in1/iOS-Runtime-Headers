/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKRoadTile : VKVectorTile {
    struct unique_ptr<vk::PatternedLayer, std::__1::default_delete<vk::PatternedLayer> > { 
        struct __compressed_pair<vk::PatternedLayer *, std::__1::default_delete<vk::PatternedLayer> > { 
            struct PatternedLayer {} *__first_; 
        } __ptr_; 
    } _patternedRibbonLayer;
    struct unique_ptr<vk::RoadLayer, std::__1::default_delete<vk::RoadLayer> > { 
        struct __compressed_pair<vk::RoadLayer *, std::__1::default_delete<vk::RoadLayer> > { 
            struct RoadLayer {} *__first_; 
        } __ptr_; 
    } _roadLayer;
    VKTrafficTile *_trafficTile;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{PatternedLayer=^^?{vector<vk::PatternedBatch *' */ struct *patternedRibbonLayer; /* unknown property attribute:  std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]{shared_ptr<ggl::Tile::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}[2{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}]I^{PatternedManager}@} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{RoadLayer=^^?{vector<vk::RoadBatch *' */ struct *roadLayer; /* unknown property attribute:  std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}}}[4^{RenderState}]{shared_ptr<ggl::Tile::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}[4{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}]I^{RoadManager}@} */
@property (nonatomic, retain) VKTrafficTile *trafficTile;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addPatternedRibbonTo:(struct unordered_map<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > >, std::__1::hash<vk::PatternedBatchKey>, std::__1::equal_to<vk::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > > > > { struct __hash_table<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, std::__1::hash<vk::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, std::__1::equal_to<vk::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> *> { struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, std::__1::hash<vk::PatternedBatchKey>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon> > > > >, std::__1::equal_to<vk::PatternedBatchKey>, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg1 styleQuery:(struct shared_ptr<md::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; })arg2 painterZ:(unsigned int)arg3 numPoints:(unsigned long)arg4 points:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg5;
- (void)addRoadRibbonTo:(struct unordered_map<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > >, std::__1::hash<vk::RoadBatchKey>, std::__1::equal_to<vk::RoadBatchKey>, std::__1::allocator<std::__1::pair<const vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > > > > { struct __hash_table<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::hash<vk::RoadBatchKey>, true>, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::equal_to<vk::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> *> { struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::hash<vk::RoadBatchKey>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon> > > > >, std::__1::equal_to<vk::RoadBatchKey>, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg1 styleQuery:(struct shared_ptr<md::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; })arg2 painterZ:(unsigned int)arg3 numPoints:(unsigned long)arg4 points:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg5 startCap:(bool)arg6 endCap:(bool)arg7;
- (void)buildGglMeshesWithDevice:(struct Device { int (**x1)(); int x2; }*)arg1;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)arg1 modelTile:(id)arg2 styleManager:(id)arg3 sharedResources:(id)arg4 contentScale:(float)arg5 device:(struct Device { int (**x1)(); int x2; }*)arg6;
- (struct PatternedLayer { int (**x1)(); struct vector<vk::PatternedBatch *, std::__1::allocator<vk::PatternedBatch *> > { struct PatternedBatch {} **x_2_1_1; struct PatternedBatch {} **x_2_1_2; struct __compressed_pair<vk::PatternedBatch **, std::__1::allocator<vk::PatternedBatch *> > { struct PatternedBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::PatternedRibbon::BaseMesh **, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[2]; struct shared_ptr<ggl::Tile::ViewUniformData> { struct ViewUniformData {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct shared_ptr<ggl::RenderState> { struct RenderState {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6[2]; unsigned int x7; struct PatternedManager {} *x8; id x9; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x10; void*x11; void*x12; void*x13; in void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; short x25; void*x26; void*x27; void*x28; double x29; void*x30; SEL x31; void*x32; SEL x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; SEL x41; void*x42; SEL x43; void*x44; void*x45; void*x46; long x47; void*x48; long x49; void*x50; out void*x51; BOOL x52; void*x53; void*x54; void*x55; void*x56; void*x57; out void*x58; const void*x59; void*x60; void*x61; short x62; void*x63; void*x64; void*x65; double x66; void*x67; SEL x68; void*x69; SEL x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; SEL x78; void*x79; SEL x80; void*x81; void*x82; void*x83; in void*x84; int x85; void*x86; long long x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; const void*x99; void*x100; void*x101; void x102; void*x103; void*x104; void*x105; SEL x106; void*x107; SEL x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; const void*x120; in void*x121; void*x122; void*x123; double x124; void*x125; void*x126; void*x127; int x128; void*x129; unsigned int x130/* : ? */; void*x131; unsigned int x132/* : ? */; void*x133; out void*x134; in void*x135; void*x136; void*x137; void*x138; void*x139; short x140; void*x141; void*x142; void*x143; double x144; void*x145; SEL x146; void*x147; SEL x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; SEL x156; void*x157; SEL x158; void*x159; double x160; void*x161; void*x162; void*x163; float x164; void*x165; void*x166; void*x167; void*x168; void*x169; long x170; void*x171; void*x172; void*x173; void*x174; void*x175; double x176; void*x177; void*x178; void*x179; long x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void x190; void*x191; void*x192; void*x193; SEL x194; void*x195; SEL x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; const void*x208; in void*x209; void*x210; void*x211; double x212; void*x213; void*x214; void*x215; int x216; void*x217; unsigned int x218/* : ? */; void*x219; unsigned int x220/* : ? */; void*x221; out void*x222; in void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void x246; void*x247; out void*x248; int x249; void*x250; double x251; void*x252; void*x253; void*x254; char *x255; void*x256; void*x257; void*x258; void*x259; void*x260; char *x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; struct x271; void*x272; void*x273; void*x274; void*x275; void*x276; in void*x277; short x278; void*x279; int x280; void*x281; void*x282; void*x283; in void*x284; void*x285; void*x286; double x287; void*x288; void*x289; void*x290; long x291; void*x292; out void*x293; in void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; }*)patternedRibbonLayer;
- (struct RoadLayer { int (**x1)(); struct vector<vk::RoadBatch *, std::__1::allocator<vk::RoadBatch *> > { struct RoadBatch {} **x_2_1_1; struct RoadBatch {} **x_2_1_2; struct __compressed_pair<vk::RoadBatch **, std::__1::allocator<vk::RoadBatch *> > { struct RoadBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[4]; struct shared_ptr<ggl::Tile::ViewUniformData> { struct ViewUniformData {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct shared_ptr<ggl::RenderState> { struct RenderState {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6[4]; unsigned int x7; struct RoadManager {} *x8; id x9; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; }*)roadLayer;
- (void)setTrafficTile:(id)arg1;
- (id)trafficTile;
- (void)updateViewDependentStateIfNecessaryWithContext:(id)arg1;

@end
