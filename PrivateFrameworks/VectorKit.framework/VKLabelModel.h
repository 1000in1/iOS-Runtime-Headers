/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class <VKLabelModelDelegate>, NSArray, VKStylesheet;

@interface VKLabelModel : VKModelObject <LabelManagerDelegate, GEOResourceManifestTileGroupObserver, VKMapLayer, VKStylesheetObserver, VKMapModeObserver> {
    struct shared_ptr<vk::LabelManager> { 
        struct LabelManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    struct vector<std::__1::shared_ptr<vk::InfoMapTile>, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > { 
        struct shared_ptr<vk::InfoMapTile> {} *__begin_; 
        struct shared_ptr<vk::InfoMapTile> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<vk::InfoMapTile> *, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > { 
            struct shared_ptr<vk::InfoMapTile> {} *__first_; 
        } __end_cap_; 
    } _currentTiles;
    BOOL _debugSkipLabels;
    <VKLabelModelDelegate> *_delegate;
    BOOL _drawLabels;
    } _labelManager;
    int _layoutStamp;
    id _observerIsReadyHook;
    BOOL _shouldModifyLabelsOnRoutes;
    bool_inRealistic;
}

@property <VKLabelModelDelegate> * delegate;
@property BOOL drawLabels;
@property(retain) NSArray * externalTrafficIncidents;
@property(readonly) struct shared_ptr<vk::LabelManager> { struct LabelManager {} *x1; struct __shared_weak_count {} *x2; } labelManager;
@property BOOL labelMarkerSelectionEnabled;
@property int labelScaleFactor;
@property BOOL localizeLabels;
@property int navigationShieldSize;
@property int shieldIdiom;
@property int shieldSize;
@property BOOL shouldModifyLabelsOnRoutes;
@property BOOL showsPointsOfInterest;
@property(readonly) VKStylesheet * stylesheet;

+ (BOOL)reloadOnStylesheetChange;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)clearScene;
- (void)dealloc;
- (void)debugHighlightLabelAtScreenPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)delegate;
- (void)deselectLabelMarker;
- (void)didTapZoom;
- (void)didTransitionFrom:(int)arg1 To:(int)arg2;
- (BOOL)drawLabels;
- (void)drawScene:(id)arg1 withContext:(id)arg2 pass:(unsigned int)arg3;
- (id)externalTrafficIncidents;
- (id)focusedPolylinePainter;
- (void)forEachDisplayedLabel:(id)arg1;
- (id)initWithPurpose:(unsigned int)arg1;
- (id)labelDebugString;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned int x4; int x5; int x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; struct Vec3Imp<double> { double x_28_1_1; double x_28_1_2; double x_28_1_3; } x28; struct Vec3Imp<double> { double x_29_1_1; double x_29_1_2; double x_29_1_3; } x29; struct Vec3Imp<double> { double x_30_1_1; double x_30_1_2; double x_30_1_3; } x30; struct Vec3Imp<double> { double x_31_1_1; double x_31_1_2; double x_31_1_3; } x31; struct Vec3Imp<double> { double x_32_1_1; double x_32_1_2; double x_32_1_3; } x32; struct Vec3Imp<double> { double x_33_1_1; double x_33_1_2; double x_33_1_3; } x33; double x34; double x35; double x36; double x37; double x38; float x39; struct { double x_40_1_1[4][4]; } x40; struct Mat4Imp<double> { double x_41_1_1[16]; } x41; struct CGSize { float x_42_1_1; float x_42_1_2; } x42; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_43_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_43_1_2; } x43; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_44_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_44_1_2; } x44; float x45; float x46; float x47; unsigned long long x48; double x49[5]; double x50; int x51; struct vector<std::__1::shared_ptr<vk::InfoMapTile>, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > { struct shared_ptr<vk::InfoMapTile> {} *x_52_1_1; struct shared_ptr<vk::InfoMapTile> {} *x_52_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoMapTile> *, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > { struct shared_ptr<vk::InfoMapTile> {} *x_3_2_1; } x_52_1_3; } x52; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_53_1_1; unsigned int x_53_1_2; id x_53_1_3; struct map<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, vk_allocator<std::__1::pair<const vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value> > > { struct __tree<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, true>, vk_allocator<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value> > > { struct __tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_53_1_4; struct map<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, vk_allocator<std::__1::pair<const vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value> > > { struct __tree<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, true>, vk_allocator<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value> > > { struct __tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_53_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, vk_allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::equal_to<GEOVectorTile *>, true>, vk_allocator<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, true> > { unsigned long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_53_1_6; struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_7_2_1; } x_53_1_7; boolx_53_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc>, vk_allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> *, vk_allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_3_3_1; } x_9_2_3; } x_53_1_9; } x53; struct LabelPool { unsigned int x_54_1_1; struct map<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, vk_allocator<std::__1::pair<const std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true>, vk_allocator<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_54_1_2; struct map<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, vk_allocator<std::__1::pair<const std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true>, vk_allocator<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_54_1_3; unsigned int x_54_1_4; } x54; struct vector<std::__1::shared_ptr<vk::InfoLabel>, vk_allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_55_1_1; struct shared_ptr<vk::InfoLabel> {} *x_55_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, vk_allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_55_1_3; } x55; struct vector<vk::InfoLabel *, vk_allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_56_1_1; struct InfoLabel {} **x_56_1_2; struct __compressed_pair<vk::InfoLabel **, vk_allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_56_1_3; } x56; struct FontAtlas { int (**x_57_1_1)(); struct shared_ptr<vk::FontAtlasPage> { struct FontAtlasPage {} *x_2_2_1; struct __shared_weak_count {} *x_2_2_2; } x_57_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, vk_allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, vk_allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_57_1_3; struct FontAtlasCell {} *x_57_1_4; struct FontAtlasCell {} *x_57_1_5; int x_57_1_6; struct CGColor {} *x_57_1_7; struct CGContext {} *x_57_1_8; void *x_57_1_9; unsigned int x_57_1_10; unsigned int x_57_1_11; unsigned int x_57_1_12; struct FontGlyphCache {} *x_57_1_13; } x57; struct LabelMesh { struct vector<vk::IconLabelPart *, vk_allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_1_2_1; struct IconLabelPart {} **x_1_2_2; struct __compressed_pair<vk::IconLabelPart **, vk_allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_1_2_3; } x_58_1_1; struct vector<vk::LabelMesh::BufferRange, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_2_2_1; struct BufferRange {} *x_2_2_2; struct __compressed_pair<vk::LabelMesh::BufferRange *, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_2_2_3; } x_58_1_2; struct VGLIconMeshVAO { int (**x_3_2_1)(); struct vector<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad> > { struct VertexQuad {} *x_2_3_1; struct VertexQuad {} *x_2_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad> > { struct VertexQuad {} *x_3_4_1; } x_2_3_3; } x_3_2_2; struct vector<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad> > { struct IndicesQuad {} *x_3_3_1; struct IndicesQuad {} *x_3_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad> > { struct IndicesQuad {} *x_3_4_1; } x_3_3_3; } x_3_2_3; unsigned int x_3_2_4; id x_3_2_5; id x_3_2_6; id x_3_2_7; unsigned int x_3_2_8; boolx_3_2_9; boolx_3_2_10; } x_58_1_3; struct vector<vk::TextLabelPart *, vk_allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_4_2_1; struct TextLabelPart {} **x_4_2_2; struct __compressed_pair<vk::TextLabelPart **, vk_allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_4_2_3; } x_58_1_4; struct vector<vk::LabelMesh::BufferRange, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_5_2_1; struct BufferRange {} *x_5_2_2; struct __compressed_pair<vk::LabelMesh::BufferRange *, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_5_2_3; } x_58_1_5; struct VGLTextMeshVAO { int (**x_6_2_1)(); struct vector<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad> > { struct VertexQuad {} *x_2_3_1; struct VertexQuad {} *x_2_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad> > { struct VertexQuad {} *x_3_4_1; } x_2_3_3; } x_6_2_2; struct vector<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad> > { struct IndicesQuad {} *x_3_3_1; struct IndicesQuad {} *x_3_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad> > { struct IndicesQuad {} *x_3_4_1; } x_3_3_3; } x_6_2_3; unsigned int x_6_2_4; id x_6_2_5; id x_6_2_6; id x_6_2_7; unsigned int x_6_2_8; boolx_6_2_9; boolx_6_2_10; } x_58_1_6; struct FontAtlas {} *x_58_1_7; id x_58_1_8; id x_58_1_9; boolx_58_1_10; } x58; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_59_1_1; float x_59_1_2; boolx_59_1_3; int x_59_1_4; int x_59_1_5; int x_59_1_6; float x_59_1_7; struct _retain_ptr<VKStylesheet *, geo::_retain_objc, geo::_release_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_59_1_8; struct _retain_ptr<VKStyleResolutionSession *, geo::_retain_objc, geo::_release_objc> { int (**x_9_2_1)(); id x_9_2_2; struct _retain_objc { } x_9_2_3; struct _release_objc { } x_9_2_4; } x_59_1_9; struct map<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, vk_allocator<std::__1::pair<VKLabelDrawStyle *const, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true>, vk_allocator<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_59_1_10; struct map<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, vk_allocator<std::__1::pair<VKLabelDrawStyle *const, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true>, vk_allocator<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_59_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_59_1_12; } x59; struct InfoLabelCollider { struct vector<vk::CollisionItem, vk_allocator<vk::CollisionItem> > { struct CollisionItem {} *x_1_2_1; struct CollisionItem {} *x_1_2_2; struct __compressed_pair<vk::CollisionItem *, vk_allocator<vk::CollisionItem> > { struct CollisionItem {} *x_3_3_1; } x_1_2_3; } x_60_1_1; struct vector<vk::CollisionPair, vk_allocator<vk::CollisionPair> > { struct CollisionPair {} *x_2_2_1; struct CollisionPair {} *x_2_2_2; struct __compressed_pair<vk::CollisionPair *, vk_allocator<vk::CollisionPair> > { struct CollisionPair {} *x_3_3_1; } x_2_2_3; } x_60_1_2; } x60; struct InfoOcclusionTester { int (**x_61_1_1)(); struct deque<std::__1::shared_ptr<vk::InfoOcclusionQuery>, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<vk::InfoOcclusionQuery> *, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_1; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_2; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_3; struct __compressed_pair<std::__1::shared_ptr<vk::InfoOcclusionQuery> **, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_4_4_1; } x_1_3_4; } x_2_2_1; unsigned int x_2_2_2; struct __compressed_pair<unsigned long, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { unsigned long x_3_3_1; } x_2_2_3; } x_61_1_2; struct deque<std::__1::shared_ptr<vk::InfoOcclusionQuery>, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<vk::InfoOcclusionQuery> *, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_1; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_2; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_3; struct __compressed_pair<std::__1::shared_ptr<vk::InfoOcclusionQuery> **, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_4_4_1; } x_1_3_4; } x_3_2_1; unsigned int x_3_2_2; struct __compressed_pair<unsigned long, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { unsigned long x_3_3_1; } x_3_2_3; } x_61_1_3; struct deque<unsigned int, vk_allocator<unsigned int> > { struct __split_buffer<unsigned int *, vk_allocator<unsigned int *> > { unsigned int **x_1_3_1; unsigned int **x_1_3_2; unsigned int **x_1_3_3; struct __compressed_pair<unsigned int **, vk_allocator<unsigned int *> > { unsigned int **x_4_4_1; } x_1_3_4; } x_4_2_1; unsigned int x_4_2_2; struct __compressed_pair<unsigned long, vk_allocator<unsigned int> > { unsigned long x_3_3_1; } x_4_2_3; } x_61_1_4; id x_61_1_5; unsigned int x_61_1_6; boolx_61_1_7; struct { double x_8_2_1[4][4]; } x_61_1_8; } x61; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_62_1_1; struct __shared_weak_count {} *x_62_1_2; } x62; struct vector<std::__1::shared_ptr<vk::LabelIcon>, vk_allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_63_1_1; struct shared_ptr<vk::LabelIcon> {} *x_63_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, vk_allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_63_1_3; } x63; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_64_1_1; struct __shared_weak_count {} *x_64_1_2; } x64; unsigned int x65; unsigned int x66; double x67; double x68; boolx69; float x70; int x71; unsigned int x72; unsigned int x73; double x74; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_75_1_1; struct __shared_weak_count {} *x_75_1_2; } x75; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_76_1_1; struct __shared_weak_count {} *x_76_1_2; } x76; int x77; int x78; int x79; float x80; int x81; boolx82; boolx83; boolx84; int x85; int x86; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc> { int (**x_87_1_1)(); id x_87_1_2; struct _retain_objc { } x_87_1_3; struct _release_objc { } x_87_1_4; } x87; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc> { int (**x_88_1_1)(); id x_88_1_2; struct _retain_objc { } x_88_1_3; struct _release_objc { } x_88_1_4; } x88; struct LabelNavTrafficSupport { struct LabelManager {} *x_89_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_89_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_89_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_89_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_89_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_89_1_6; boolx_89_1_7; } x89; boolx90; struct vector<std::__1::shared_ptr<vk::NavLabel>, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_91_1_1; struct shared_ptr<vk::NavLabel> {} *x_91_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_91_1_3; } x91; struct BRectImp<double> { struct Vec2Imp<double> { double x_1_2_1; double x_1_2_2; } x_92_1_1; struct Vec2Imp<double> { double x_2_2_1; double x_2_2_2; } x_92_1_2; } x92; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_93_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_93_1_2; } x93; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_94_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_94_1_2; } x94; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_95_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_95_1_2; } x95; }*)arg1 pendingArtworkIsReady:(BOOL)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned int x4; int x5; int x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; struct Vec3Imp<double> { double x_28_1_1; double x_28_1_2; double x_28_1_3; } x28; struct Vec3Imp<double> { double x_29_1_1; double x_29_1_2; double x_29_1_3; } x29; struct Vec3Imp<double> { double x_30_1_1; double x_30_1_2; double x_30_1_3; } x30; struct Vec3Imp<double> { double x_31_1_1; double x_31_1_2; double x_31_1_3; } x31; struct Vec3Imp<double> { double x_32_1_1; double x_32_1_2; double x_32_1_3; } x32; struct Vec3Imp<double> { double x_33_1_1; double x_33_1_2; double x_33_1_3; } x33; double x34; double x35; double x36; double x37; double x38; float x39; struct { double x_40_1_1[4][4]; } x40; struct Mat4Imp<double> { double x_41_1_1[16]; } x41; struct CGSize { float x_42_1_1; float x_42_1_2; } x42; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_43_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_43_1_2; } x43; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_44_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_44_1_2; } x44; float x45; float x46; float x47; unsigned long long x48; double x49[5]; double x50; int x51; struct vector<std::__1::shared_ptr<vk::InfoMapTile>, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > { struct shared_ptr<vk::InfoMapTile> {} *x_52_1_1; struct shared_ptr<vk::InfoMapTile> {} *x_52_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoMapTile> *, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > { struct shared_ptr<vk::InfoMapTile> {} *x_3_2_1; } x_52_1_3; } x52; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_53_1_1; unsigned int x_53_1_2; id x_53_1_3; struct map<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, vk_allocator<std::__1::pair<const vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value> > > { struct __tree<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, true>, vk_allocator<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value> > > { struct __tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_53_1_4; struct map<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, vk_allocator<std::__1::pair<const vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value> > > { struct __tree<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, true>, vk_allocator<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value> > > { struct __tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_53_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, vk_allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::equal_to<GEOVectorTile *>, true>, vk_allocator<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, true> > { unsigned long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_53_1_6; struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_7_2_1; } x_53_1_7; boolx_53_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc>, vk_allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> *, vk_allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_3_3_1; } x_9_2_3; } x_53_1_9; } x53; struct LabelPool { unsigned int x_54_1_1; struct map<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, vk_allocator<std::__1::pair<const std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true>, vk_allocator<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_54_1_2; struct map<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, vk_allocator<std::__1::pair<const std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true>, vk_allocator<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_54_1_3; unsigned int x_54_1_4; } x54; struct vector<std::__1::shared_ptr<vk::InfoLabel>, vk_allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_55_1_1; struct shared_ptr<vk::InfoLabel> {} *x_55_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, vk_allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_55_1_3; } x55; struct vector<vk::InfoLabel *, vk_allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_56_1_1; struct InfoLabel {} **x_56_1_2; struct __compressed_pair<vk::InfoLabel **, vk_allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_56_1_3; } x56; struct FontAtlas { int (**x_57_1_1)(); struct shared_ptr<vk::FontAtlasPage> { struct FontAtlasPage {} *x_2_2_1; struct __shared_weak_count {} *x_2_2_2; } x_57_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, vk_allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, vk_allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_57_1_3; struct FontAtlasCell {} *x_57_1_4; struct FontAtlasCell {} *x_57_1_5; int x_57_1_6; struct CGColor {} *x_57_1_7; struct CGContext {} *x_57_1_8; void *x_57_1_9; unsigned int x_57_1_10; unsigned int x_57_1_11; unsigned int x_57_1_12; struct FontGlyphCache {} *x_57_1_13; } x57; struct LabelMesh { struct vector<vk::IconLabelPart *, vk_allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_1_2_1; struct IconLabelPart {} **x_1_2_2; struct __compressed_pair<vk::IconLabelPart **, vk_allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_1_2_3; } x_58_1_1; struct vector<vk::LabelMesh::BufferRange, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_2_2_1; struct BufferRange {} *x_2_2_2; struct __compressed_pair<vk::LabelMesh::BufferRange *, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_2_2_3; } x_58_1_2; struct VGLIconMeshVAO { int (**x_3_2_1)(); struct vector<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad> > { struct VertexQuad {} *x_2_3_1; struct VertexQuad {} *x_2_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad> > { struct VertexQuad {} *x_3_4_1; } x_2_3_3; } x_3_2_2; struct vector<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad> > { struct IndicesQuad {} *x_3_3_1; struct IndicesQuad {} *x_3_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad> > { struct IndicesQuad {} *x_3_4_1; } x_3_3_3; } x_3_2_3; unsigned int x_3_2_4; id x_3_2_5; id x_3_2_6; id x_3_2_7; unsigned int x_3_2_8; boolx_3_2_9; boolx_3_2_10; } x_58_1_3; struct vector<vk::TextLabelPart *, vk_allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_4_2_1; struct TextLabelPart {} **x_4_2_2; struct __compressed_pair<vk::TextLabelPart **, vk_allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_4_2_3; } x_58_1_4; struct vector<vk::LabelMesh::BufferRange, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_5_2_1; struct BufferRange {} *x_5_2_2; struct __compressed_pair<vk::LabelMesh::BufferRange *, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_5_2_3; } x_58_1_5; struct VGLTextMeshVAO { int (**x_6_2_1)(); struct vector<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad> > { struct VertexQuad {} *x_2_3_1; struct VertexQuad {} *x_2_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad> > { struct VertexQuad {} *x_3_4_1; } x_2_3_3; } x_6_2_2; struct vector<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad> > { struct IndicesQuad {} *x_3_3_1; struct IndicesQuad {} *x_3_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad> > { struct IndicesQuad {} *x_3_4_1; } x_3_3_3; } x_6_2_3; unsigned int x_6_2_4; id x_6_2_5; id x_6_2_6; id x_6_2_7; unsigned int x_6_2_8; boolx_6_2_9; boolx_6_2_10; } x_58_1_6; struct FontAtlas {} *x_58_1_7; id x_58_1_8; id x_58_1_9; boolx_58_1_10; } x58; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_59_1_1; float x_59_1_2; boolx_59_1_3; int x_59_1_4; int x_59_1_5; int x_59_1_6; float x_59_1_7; struct _retain_ptr<VKStylesheet *, geo::_retain_objc, geo::_release_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_59_1_8; struct _retain_ptr<VKStyleResolutionSession *, geo::_retain_objc, geo::_release_objc> { int (**x_9_2_1)(); id x_9_2_2; struct _retain_objc { } x_9_2_3; struct _release_objc { } x_9_2_4; } x_59_1_9; struct map<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, vk_allocator<std::__1::pair<VKLabelDrawStyle *const, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true>, vk_allocator<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_59_1_10; struct map<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, vk_allocator<std::__1::pair<VKLabelDrawStyle *const, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true>, vk_allocator<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_59_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_59_1_12; } x59; struct InfoLabelCollider { struct vector<vk::CollisionItem, vk_allocator<vk::CollisionItem> > { struct CollisionItem {} *x_1_2_1; struct CollisionItem {} *x_1_2_2; struct __compressed_pair<vk::CollisionItem *, vk_allocator<vk::CollisionItem> > { struct CollisionItem {} *x_3_3_1; } x_1_2_3; } x_60_1_1; struct vector<vk::CollisionPair, vk_allocator<vk::CollisionPair> > { struct CollisionPair {} *x_2_2_1; struct CollisionPair {} *x_2_2_2; struct __compressed_pair<vk::CollisionPair *, vk_allocator<vk::CollisionPair> > { struct CollisionPair {} *x_3_3_1; } x_2_2_3; } x_60_1_2; } x60; struct InfoOcclusionTester { int (**x_61_1_1)(); struct deque<std::__1::shared_ptr<vk::InfoOcclusionQuery>, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<vk::InfoOcclusionQuery> *, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_1; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_2; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_3; struct __compressed_pair<std::__1::shared_ptr<vk::InfoOcclusionQuery> **, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_4_4_1; } x_1_3_4; } x_2_2_1; unsigned int x_2_2_2; struct __compressed_pair<unsigned long, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { unsigned long x_3_3_1; } x_2_2_3; } x_61_1_2; struct deque<std::__1::shared_ptr<vk::InfoOcclusionQuery>, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<vk::InfoOcclusionQuery> *, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_1; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_2; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_3; struct __compressed_pair<std::__1::shared_ptr<vk::InfoOcclusionQuery> **, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_4_4_1; } x_1_3_4; } x_3_2_1; unsigned int x_3_2_2; struct __compressed_pair<unsigned long, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { unsigned long x_3_3_1; } x_3_2_3; } x_61_1_3; struct deque<unsigned int, vk_allocator<unsigned int> > { struct __split_buffer<unsigned int *, vk_allocator<unsigned int *> > { unsigned int **x_1_3_1; unsigned int **x_1_3_2; unsigned int **x_1_3_3; struct __compressed_pair<unsigned int **, vk_allocator<unsigned int *> > { unsigned int **x_4_4_1; } x_1_3_4; } x_4_2_1; unsigned int x_4_2_2; struct __compressed_pair<unsigned long, vk_allocator<unsigned int> > { unsigned long x_3_3_1; } x_4_2_3; } x_61_1_4; id x_61_1_5; unsigned int x_61_1_6; boolx_61_1_7; struct { double x_8_2_1[4][4]; } x_61_1_8; } x61; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_62_1_1; struct __shared_weak_count {} *x_62_1_2; } x62; struct vector<std::__1::shared_ptr<vk::LabelIcon>, vk_allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_63_1_1; struct shared_ptr<vk::LabelIcon> {} *x_63_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, vk_allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_63_1_3; } x63; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_64_1_1; struct __shared_weak_count {} *x_64_1_2; } x64; unsigned int x65; unsigned int x66; double x67; double x68; boolx69; float x70; int x71; unsigned int x72; unsigned int x73; double x74; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_75_1_1; struct __shared_weak_count {} *x_75_1_2; } x75; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_76_1_1; struct __shared_weak_count {} *x_76_1_2; } x76; int x77; int x78; int x79; float x80; int x81; boolx82; boolx83; boolx84; int x85; int x86; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc> { int (**x_87_1_1)(); id x_87_1_2; struct _retain_objc { } x_87_1_3; struct _release_objc { } x_87_1_4; } x87; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc> { int (**x_88_1_1)(); id x_88_1_2; struct _retain_objc { } x_88_1_3; struct _release_objc { } x_88_1_4; } x88; struct LabelNavTrafficSupport { struct LabelManager {} *x_89_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_89_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_89_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_89_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_89_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_89_1_6; boolx_89_1_7; } x89; boolx90; struct vector<std::__1::shared_ptr<vk::NavLabel>, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_91_1_1; struct shared_ptr<vk::NavLabel> {} *x_91_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_91_1_3; } x91; struct BRectImp<double> { struct Vec2Imp<double> { double x_1_2_1; double x_1_2_2; } x_92_1_1; struct Vec2Imp<double> { double x_2_2_1; double x_2_2_2; } x_92_1_2; } x92; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_93_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_93_1_2; } x93; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_94_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_94_1_2; } x94; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_95_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_95_1_2; } x95; }*)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned int x4; int x5; int x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; struct Vec3Imp<double> { double x_28_1_1; double x_28_1_2; double x_28_1_3; } x28; struct Vec3Imp<double> { double x_29_1_1; double x_29_1_2; double x_29_1_3; } x29; struct Vec3Imp<double> { double x_30_1_1; double x_30_1_2; double x_30_1_3; } x30; struct Vec3Imp<double> { double x_31_1_1; double x_31_1_2; double x_31_1_3; } x31; struct Vec3Imp<double> { double x_32_1_1; double x_32_1_2; double x_32_1_3; } x32; struct Vec3Imp<double> { double x_33_1_1; double x_33_1_2; double x_33_1_3; } x33; double x34; double x35; double x36; double x37; double x38; float x39; struct { double x_40_1_1[4][4]; } x40; struct Mat4Imp<double> { double x_41_1_1[16]; } x41; struct CGSize { float x_42_1_1; float x_42_1_2; } x42; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_43_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_43_1_2; } x43; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_44_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_44_1_2; } x44; float x45; float x46; float x47; unsigned long long x48; double x49[5]; double x50; int x51; struct vector<std::__1::shared_ptr<vk::InfoMapTile>, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > { struct shared_ptr<vk::InfoMapTile> {} *x_52_1_1; struct shared_ptr<vk::InfoMapTile> {} *x_52_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoMapTile> *, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > { struct shared_ptr<vk::InfoMapTile> {} *x_3_2_1; } x_52_1_3; } x52; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_53_1_1; unsigned int x_53_1_2; id x_53_1_3; struct map<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, vk_allocator<std::__1::pair<const vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value> > > { struct __tree<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, true>, vk_allocator<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value> > > { struct __tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_53_1_4; struct map<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, vk_allocator<std::__1::pair<const vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value> > > { struct __tree<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, true>, vk_allocator<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value> > > { struct __tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_53_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, vk_allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::equal_to<GEOVectorTile *>, true>, vk_allocator<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, true> > { unsigned long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_53_1_6; struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_7_2_1; } x_53_1_7; boolx_53_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc>, vk_allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> *, vk_allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_3_3_1; } x_9_2_3; } x_53_1_9; } x53; struct LabelPool { unsigned int x_54_1_1; struct map<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, vk_allocator<std::__1::pair<const std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true>, vk_allocator<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_54_1_2; struct map<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, vk_allocator<std::__1::pair<const std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true>, vk_allocator<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_54_1_3; unsigned int x_54_1_4; } x54; struct vector<std::__1::shared_ptr<vk::InfoLabel>, vk_allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_55_1_1; struct shared_ptr<vk::InfoLabel> {} *x_55_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, vk_allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_55_1_3; } x55; struct vector<vk::InfoLabel *, vk_allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_56_1_1; struct InfoLabel {} **x_56_1_2; struct __compressed_pair<vk::InfoLabel **, vk_allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_56_1_3; } x56; struct FontAtlas { int (**x_57_1_1)(); struct shared_ptr<vk::FontAtlasPage> { struct FontAtlasPage {} *x_2_2_1; struct __shared_weak_count {} *x_2_2_2; } x_57_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, vk_allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, vk_allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_57_1_3; struct FontAtlasCell {} *x_57_1_4; struct FontAtlasCell {} *x_57_1_5; int x_57_1_6; struct CGColor {} *x_57_1_7; struct CGContext {} *x_57_1_8; void *x_57_1_9; unsigned int x_57_1_10; unsigned int x_57_1_11; unsigned int x_57_1_12; struct FontGlyphCache {} *x_57_1_13; } x57; struct LabelMesh { struct vector<vk::IconLabelPart *, vk_allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_1_2_1; struct IconLabelPart {} **x_1_2_2; struct __compressed_pair<vk::IconLabelPart **, vk_allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_1_2_3; } x_58_1_1; struct vector<vk::LabelMesh::BufferRange, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_2_2_1; struct BufferRange {} *x_2_2_2; struct __compressed_pair<vk::LabelMesh::BufferRange *, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_2_2_3; } x_58_1_2; struct VGLIconMeshVAO { int (**x_3_2_1)(); struct vector<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad> > { struct VertexQuad {} *x_2_3_1; struct VertexQuad {} *x_2_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad> > { struct VertexQuad {} *x_3_4_1; } x_2_3_3; } x_3_2_2; struct vector<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad> > { struct IndicesQuad {} *x_3_3_1; struct IndicesQuad {} *x_3_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad> > { struct IndicesQuad {} *x_3_4_1; } x_3_3_3; } x_3_2_3; unsigned int x_3_2_4; id x_3_2_5; id x_3_2_6; id x_3_2_7; unsigned int x_3_2_8; boolx_3_2_9; boolx_3_2_10; } x_58_1_3; struct vector<vk::TextLabelPart *, vk_allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_4_2_1; struct TextLabelPart {} **x_4_2_2; struct __compressed_pair<vk::TextLabelPart **, vk_allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_4_2_3; } x_58_1_4; struct vector<vk::LabelMesh::BufferRange, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_5_2_1; struct BufferRange {} *x_5_2_2; struct __compressed_pair<vk::LabelMesh::BufferRange *, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_5_2_3; } x_58_1_5; struct VGLTextMeshVAO { int (**x_6_2_1)(); struct vector<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad> > { struct VertexQuad {} *x_2_3_1; struct VertexQuad {} *x_2_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad> > { struct VertexQuad {} *x_3_4_1; } x_2_3_3; } x_6_2_2; struct vector<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad> > { struct IndicesQuad {} *x_3_3_1; struct IndicesQuad {} *x_3_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad> > { struct IndicesQuad {} *x_3_4_1; } x_3_3_3; } x_6_2_3; unsigned int x_6_2_4; id x_6_2_5; id x_6_2_6; id x_6_2_7; unsigned int x_6_2_8; boolx_6_2_9; boolx_6_2_10; } x_58_1_6; struct FontAtlas {} *x_58_1_7; id x_58_1_8; id x_58_1_9; boolx_58_1_10; } x58; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_59_1_1; float x_59_1_2; boolx_59_1_3; int x_59_1_4; int x_59_1_5; int x_59_1_6; float x_59_1_7; struct _retain_ptr<VKStylesheet *, geo::_retain_objc, geo::_release_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_59_1_8; struct _retain_ptr<VKStyleResolutionSession *, geo::_retain_objc, geo::_release_objc> { int (**x_9_2_1)(); id x_9_2_2; struct _retain_objc { } x_9_2_3; struct _release_objc { } x_9_2_4; } x_59_1_9; struct map<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, vk_allocator<std::__1::pair<VKLabelDrawStyle *const, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true>, vk_allocator<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_59_1_10; struct map<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, vk_allocator<std::__1::pair<VKLabelDrawStyle *const, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true>, vk_allocator<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_59_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_59_1_12; } x59; struct InfoLabelCollider { struct vector<vk::CollisionItem, vk_allocator<vk::CollisionItem> > { struct CollisionItem {} *x_1_2_1; struct CollisionItem {} *x_1_2_2; struct __compressed_pair<vk::CollisionItem *, vk_allocator<vk::CollisionItem> > { struct CollisionItem {} *x_3_3_1; } x_1_2_3; } x_60_1_1; struct vector<vk::CollisionPair, vk_allocator<vk::CollisionPair> > { struct CollisionPair {} *x_2_2_1; struct CollisionPair {} *x_2_2_2; struct __compressed_pair<vk::CollisionPair *, vk_allocator<vk::CollisionPair> > { struct CollisionPair {} *x_3_3_1; } x_2_2_3; } x_60_1_2; } x60; struct InfoOcclusionTester { int (**x_61_1_1)(); struct deque<std::__1::shared_ptr<vk::InfoOcclusionQuery>, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<vk::InfoOcclusionQuery> *, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_1; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_2; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_3; struct __compressed_pair<std::__1::shared_ptr<vk::InfoOcclusionQuery> **, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_4_4_1; } x_1_3_4; } x_2_2_1; unsigned int x_2_2_2; struct __compressed_pair<unsigned long, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { unsigned long x_3_3_1; } x_2_2_3; } x_61_1_2; struct deque<std::__1::shared_ptr<vk::InfoOcclusionQuery>, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<vk::InfoOcclusionQuery> *, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_1; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_2; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_3; struct __compressed_pair<std::__1::shared_ptr<vk::InfoOcclusionQuery> **, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_4_4_1; } x_1_3_4; } x_3_2_1; unsigned int x_3_2_2; struct __compressed_pair<unsigned long, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { unsigned long x_3_3_1; } x_3_2_3; } x_61_1_3; struct deque<unsigned int, vk_allocator<unsigned int> > { struct __split_buffer<unsigned int *, vk_allocator<unsigned int *> > { unsigned int **x_1_3_1; unsigned int **x_1_3_2; unsigned int **x_1_3_3; struct __compressed_pair<unsigned int **, vk_allocator<unsigned int *> > { unsigned int **x_4_4_1; } x_1_3_4; } x_4_2_1; unsigned int x_4_2_2; struct __compressed_pair<unsigned long, vk_allocator<unsigned int> > { unsigned long x_3_3_1; } x_4_2_3; } x_61_1_4; id x_61_1_5; unsigned int x_61_1_6; boolx_61_1_7; struct { double x_8_2_1[4][4]; } x_61_1_8; } x61; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_62_1_1; struct __shared_weak_count {} *x_62_1_2; } x62; struct vector<std::__1::shared_ptr<vk::LabelIcon>, vk_allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_63_1_1; struct shared_ptr<vk::LabelIcon> {} *x_63_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, vk_allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_63_1_3; } x63; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_64_1_1; struct __shared_weak_count {} *x_64_1_2; } x64; unsigned int x65; unsigned int x66; double x67; double x68; boolx69; float x70; int x71; unsigned int x72; unsigned int x73; double x74; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_75_1_1; struct __shared_weak_count {} *x_75_1_2; } x75; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_76_1_1; struct __shared_weak_count {} *x_76_1_2; } x76; int x77; int x78; int x79; float x80; int x81; boolx82; boolx83; boolx84; int x85; int x86; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc> { int (**x_87_1_1)(); id x_87_1_2; struct _retain_objc { } x_87_1_3; struct _release_objc { } x_87_1_4; } x87; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc> { int (**x_88_1_1)(); id x_88_1_2; struct _retain_objc { } x_88_1_3; struct _release_objc { } x_88_1_4; } x88; struct LabelNavTrafficSupport { struct LabelManager {} *x_89_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_89_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_89_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_89_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_89_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_89_1_6; boolx_89_1_7; } x89; boolx90; struct vector<std::__1::shared_ptr<vk::NavLabel>, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_91_1_1; struct shared_ptr<vk::NavLabel> {} *x_91_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_91_1_3; } x91; struct BRectImp<double> { struct Vec2Imp<double> { double x_1_2_1; double x_1_2_2; } x_92_1_1; struct Vec2Imp<double> { double x_2_2_1; double x_2_2_2; } x_92_1_2; } x92; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_93_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_93_1_2; } x93; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_94_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_94_1_2; } x94; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_95_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_95_1_2; } x95; }*)arg1 setNeedsDisplay:(BOOL)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned int x4; int x5; int x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; struct Vec3Imp<double> { double x_28_1_1; double x_28_1_2; double x_28_1_3; } x28; struct Vec3Imp<double> { double x_29_1_1; double x_29_1_2; double x_29_1_3; } x29; struct Vec3Imp<double> { double x_30_1_1; double x_30_1_2; double x_30_1_3; } x30; struct Vec3Imp<double> { double x_31_1_1; double x_31_1_2; double x_31_1_3; } x31; struct Vec3Imp<double> { double x_32_1_1; double x_32_1_2; double x_32_1_3; } x32; struct Vec3Imp<double> { double x_33_1_1; double x_33_1_2; double x_33_1_3; } x33; double x34; double x35; double x36; double x37; double x38; float x39; struct { double x_40_1_1[4][4]; } x40; struct Mat4Imp<double> { double x_41_1_1[16]; } x41; struct CGSize { float x_42_1_1; float x_42_1_2; } x42; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_43_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_43_1_2; } x43; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_44_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_44_1_2; } x44; float x45; float x46; float x47; unsigned long long x48; double x49[5]; double x50; int x51; struct vector<std::__1::shared_ptr<vk::InfoMapTile>, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > { struct shared_ptr<vk::InfoMapTile> {} *x_52_1_1; struct shared_ptr<vk::InfoMapTile> {} *x_52_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoMapTile> *, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > { struct shared_ptr<vk::InfoMapTile> {} *x_3_2_1; } x_52_1_3; } x52; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_53_1_1; unsigned int x_53_1_2; id x_53_1_3; struct map<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, vk_allocator<std::__1::pair<const vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value> > > { struct __tree<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, true>, vk_allocator<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value> > > { struct __tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::RoadLabelFeature>::Less, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_53_1_4; struct map<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, vk_allocator<std::__1::pair<const vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value> > > { struct __tree<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, true>, vk_allocator<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value> > > { struct __tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Key, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Value, vk::InfoLabelFeaturePool::FeaturePoolEntry<vk::PointLabelFeature>::Less, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_53_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, vk_allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::equal_to<GEOVectorTile *>, true>, vk_allocator<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::pair<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, true> > { unsigned long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_53_1_6; struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_7_2_1; } x_53_1_7; boolx_53_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc>, vk_allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> *, vk_allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc> {} *x_3_3_1; } x_9_2_3; } x_53_1_9; } x53; struct LabelPool { unsigned int x_54_1_1; struct map<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, vk_allocator<std::__1::pair<const std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true>, vk_allocator<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_54_1_2; struct map<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, vk_allocator<std::__1::pair<const std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true>, vk_allocator<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, unsigned int>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, unsigned int> >, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_54_1_3; unsigned int x_54_1_4; } x54; struct vector<std::__1::shared_ptr<vk::InfoLabel>, vk_allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_55_1_1; struct shared_ptr<vk::InfoLabel> {} *x_55_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, vk_allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_55_1_3; } x55; struct vector<vk::InfoLabel *, vk_allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_56_1_1; struct InfoLabel {} **x_56_1_2; struct __compressed_pair<vk::InfoLabel **, vk_allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_56_1_3; } x56; struct FontAtlas { int (**x_57_1_1)(); struct shared_ptr<vk::FontAtlasPage> { struct FontAtlasPage {} *x_2_2_1; struct __shared_weak_count {} *x_2_2_2; } x_57_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, vk_allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, vk_allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_57_1_3; struct FontAtlasCell {} *x_57_1_4; struct FontAtlasCell {} *x_57_1_5; int x_57_1_6; struct CGColor {} *x_57_1_7; struct CGContext {} *x_57_1_8; void *x_57_1_9; unsigned int x_57_1_10; unsigned int x_57_1_11; unsigned int x_57_1_12; struct FontGlyphCache {} *x_57_1_13; } x57; struct LabelMesh { struct vector<vk::IconLabelPart *, vk_allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_1_2_1; struct IconLabelPart {} **x_1_2_2; struct __compressed_pair<vk::IconLabelPart **, vk_allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_1_2_3; } x_58_1_1; struct vector<vk::LabelMesh::BufferRange, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_2_2_1; struct BufferRange {} *x_2_2_2; struct __compressed_pair<vk::LabelMesh::BufferRange *, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_2_2_3; } x_58_1_2; struct VGLIconMeshVAO { int (**x_3_2_1)(); struct vector<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad> > { struct VertexQuad {} *x_2_3_1; struct VertexQuad {} *x_2_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::VertexQuad> > { struct VertexQuad {} *x_3_4_1; } x_2_3_3; } x_3_2_2; struct vector<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad> > { struct IndicesQuad {} *x_3_3_1; struct IndicesQuad {} *x_3_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLIconMeshVertex, 40>::IndicesQuad> > { struct IndicesQuad {} *x_3_4_1; } x_3_3_3; } x_3_2_3; unsigned int x_3_2_4; id x_3_2_5; id x_3_2_6; id x_3_2_7; unsigned int x_3_2_8; boolx_3_2_9; boolx_3_2_10; } x_58_1_3; struct vector<vk::TextLabelPart *, vk_allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_4_2_1; struct TextLabelPart {} **x_4_2_2; struct __compressed_pair<vk::TextLabelPart **, vk_allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_4_2_3; } x_58_1_4; struct vector<vk::LabelMesh::BufferRange, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_5_2_1; struct BufferRange {} *x_5_2_2; struct __compressed_pair<vk::LabelMesh::BufferRange *, vk_allocator<vk::LabelMesh::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_5_2_3; } x_58_1_5; struct VGLTextMeshVAO { int (**x_6_2_1)(); struct vector<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad> > { struct VertexQuad {} *x_2_3_1; struct VertexQuad {} *x_2_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::VertexQuad> > { struct VertexQuad {} *x_3_4_1; } x_2_3_3; } x_6_2_2; struct vector<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad> > { struct IndicesQuad {} *x_3_3_1; struct IndicesQuad {} *x_3_3_2; struct __compressed_pair<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad *, vk_allocator<vk::VGLQuadMeshVAO<vk::VGLTextMeshVertex, 1000>::IndicesQuad> > { struct IndicesQuad {} *x_3_4_1; } x_3_3_3; } x_6_2_3; unsigned int x_6_2_4; id x_6_2_5; id x_6_2_6; id x_6_2_7; unsigned int x_6_2_8; boolx_6_2_9; boolx_6_2_10; } x_58_1_6; struct FontAtlas {} *x_58_1_7; id x_58_1_8; id x_58_1_9; boolx_58_1_10; } x58; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long x_1_3_1; BOOL x_1_3_2[40]; } x_1_2_1; } x_59_1_1; float x_59_1_2; boolx_59_1_3; int x_59_1_4; int x_59_1_5; int x_59_1_6; float x_59_1_7; struct _retain_ptr<VKStylesheet *, geo::_retain_objc, geo::_release_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_59_1_8; struct _retain_ptr<VKStyleResolutionSession *, geo::_retain_objc, geo::_release_objc> { int (**x_9_2_1)(); id x_9_2_2; struct _retain_objc { } x_9_2_3; struct _release_objc { } x_9_2_4; } x_59_1_9; struct map<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, vk_allocator<std::__1::pair<VKLabelDrawStyle *const, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true>, vk_allocator<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_59_1_10; struct map<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, vk_allocator<std::__1::pair<VKLabelDrawStyle *const, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true>, vk_allocator<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKLabelDrawStyle *, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<VKLabelDrawStyle *>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_59_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_59_1_12; } x59; struct InfoLabelCollider { struct vector<vk::CollisionItem, vk_allocator<vk::CollisionItem> > { struct CollisionItem {} *x_1_2_1; struct CollisionItem {} *x_1_2_2; struct __compressed_pair<vk::CollisionItem *, vk_allocator<vk::CollisionItem> > { struct CollisionItem {} *x_3_3_1; } x_1_2_3; } x_60_1_1; struct vector<vk::CollisionPair, vk_allocator<vk::CollisionPair> > { struct CollisionPair {} *x_2_2_1; struct CollisionPair {} *x_2_2_2; struct __compressed_pair<vk::CollisionPair *, vk_allocator<vk::CollisionPair> > { struct CollisionPair {} *x_3_3_1; } x_2_2_3; } x_60_1_2; } x60; struct InfoOcclusionTester { int (**x_61_1_1)(); struct deque<std::__1::shared_ptr<vk::InfoOcclusionQuery>, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<vk::InfoOcclusionQuery> *, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_1; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_2; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_3; struct __compressed_pair<std::__1::shared_ptr<vk::InfoOcclusionQuery> **, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_4_4_1; } x_1_3_4; } x_2_2_1; unsigned int x_2_2_2; struct __compressed_pair<unsigned long, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { unsigned long x_3_3_1; } x_2_2_3; } x_61_1_2; struct deque<std::__1::shared_ptr<vk::InfoOcclusionQuery>, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { struct __split_buffer<std::__1::shared_ptr<vk::InfoOcclusionQuery> *, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_1; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_2; struct shared_ptr<vk::InfoOcclusionQuery> {} **x_1_3_3; struct __compressed_pair<std::__1::shared_ptr<vk::InfoOcclusionQuery> **, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> *> > { struct shared_ptr<vk::InfoOcclusionQuery> {} **x_4_4_1; } x_1_3_4; } x_3_2_1; unsigned int x_3_2_2; struct __compressed_pair<unsigned long, vk_allocator<std::__1::shared_ptr<vk::InfoOcclusionQuery> > > { unsigned long x_3_3_1; } x_3_2_3; } x_61_1_3; struct deque<unsigned int, vk_allocator<unsigned int> > { struct __split_buffer<unsigned int *, vk_allocator<unsigned int *> > { unsigned int **x_1_3_1; unsigned int **x_1_3_2; unsigned int **x_1_3_3; struct __compressed_pair<unsigned int **, vk_allocator<unsigned int *> > { unsigned int **x_4_4_1; } x_1_3_4; } x_4_2_1; unsigned int x_4_2_2; struct __compressed_pair<unsigned long, vk_allocator<unsigned int> > { unsigned long x_3_3_1; } x_4_2_3; } x_61_1_4; id x_61_1_5; unsigned int x_61_1_6; boolx_61_1_7; struct { double x_8_2_1[4][4]; } x_61_1_8; } x61; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_62_1_1; struct __shared_weak_count {} *x_62_1_2; } x62; struct vector<std::__1::shared_ptr<vk::LabelIcon>, vk_allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_63_1_1; struct shared_ptr<vk::LabelIcon> {} *x_63_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, vk_allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_63_1_3; } x63; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_64_1_1; struct __shared_weak_count {} *x_64_1_2; } x64; unsigned int x65; unsigned int x66; double x67; double x68; boolx69; float x70; int x71; unsigned int x72; unsigned int x73; double x74; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_75_1_1; struct __shared_weak_count {} *x_75_1_2; } x75; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_76_1_1; struct __shared_weak_count {} *x_76_1_2; } x76; int x77; int x78; int x79; float x80; int x81; boolx82; boolx83; boolx84; int x85; int x86; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc> { int (**x_87_1_1)(); id x_87_1_2; struct _retain_objc { } x_87_1_3; struct _release_objc { } x_87_1_4; } x87; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc> { int (**x_88_1_1)(); id x_88_1_2; struct _retain_objc { } x_88_1_3; struct _release_objc { } x_88_1_4; } x88; struct LabelNavTrafficSupport { struct LabelManager {} *x_89_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_89_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_89_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_89_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_89_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, vk_allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_89_1_6; boolx_89_1_7; } x89; boolx90; struct vector<std::__1::shared_ptr<vk::NavLabel>, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_91_1_1; struct shared_ptr<vk::NavLabel> {} *x_91_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_91_1_3; } x91; struct BRectImp<double> { struct Vec2Imp<double> { double x_1_2_1; double x_1_2_2; } x_92_1_1; struct Vec2Imp<double> { double x_2_2_1; double x_2_2_2; } x_92_1_2; } x92; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_93_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_93_1_2; } x93; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_94_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_94_1_2; } x94; struct BRectImp<float> { struct Vec2Imp<float> { float x_1_2_1; float x_1_2_2; } x_95_1_1; struct Vec2Imp<float> { float x_2_2_1; float x_2_2_2; } x_95_1_2; } x95; }*)arg1 setNeedsLayout:(BOOL)arg2;
- (struct shared_ptr<vk::LabelManager> { struct LabelManager {} *x1; struct __shared_weak_count {} *x2; })labelManager;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 selectableLabelsOnly:(BOOL)arg2;
- (BOOL)labelMarkerSelectionEnabled;
- (id)labelMarkers;
- (int)labelScaleFactor;
- (void)layoutScene:(id)arg1 withContext:(id)arg2;
- (BOOL)localizeLabels;
- (unsigned int)mapLayerPosition;
- (int)navigationShieldSize;
- (void)prepareForStylesheetTransitionToMapDisplayStyle:(int)arg1 withReadinessBlock:(id)arg2;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeUserOffset;
- (void)selectLabelMarker:(id)arg1;
- (id)selectedLabelMarker;
- (void)setContentScale:(float)arg1;
- (void)setCurrentLocationText:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDrawLabels:(BOOL)arg1;
- (void)setExternalTrafficIncidents:(id)arg1;
- (void)setFocusedPolylinePainter:(id)arg1;
- (void)setIsShowingRoute:(BOOL)arg1;
- (void)setLabelMarkerSelectionEnabled:(BOOL)arg1;
- (void)setLabelMode:(int)arg1;
- (void)setLabelScaleFactor:(int)arg1;
- (void)setLocalizeLabels:(BOOL)arg1;
- (void)setMapType:(int)arg1;
- (void)setNavigationPuckSize:(float)arg1;
- (void)setNavigationShieldSize:(int)arg1;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setShieldIdiom:(int)arg1;
- (void)setShieldSize:(int)arg1;
- (void)setShouldModifyLabelsOnRoutes:(BOOL)arg1;
- (void)setShowsPointsOfInterest:(BOOL)arg1;
- (void)setStylesheet:(id)arg1;
- (void)setTrafficEnabled:(BOOL)arg1;
- (void)setVectorType:(int)arg1;
- (int)shieldIdiom;
- (int)shieldSize;
- (BOOL)shouldModifyLabelsOnRoutes;
- (BOOL)showsPointsOfInterest;
- (id)stylesheet;
- (void)stylesheetDidChange;
- (void)stylesheetDoneChanging;
- (void)stylesheetWillTransition:(int)arg1;
- (unsigned int)supportedRenderPasses;
- (void)updateInfoMapTiles:(id)arg1;
- (void)willTapZoom;
- (void)willTransitionFrom:(int)arg1 To:(int)arg2;

@end
