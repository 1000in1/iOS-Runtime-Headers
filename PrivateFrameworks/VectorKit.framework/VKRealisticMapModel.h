/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKRealisticMapModel : VKVectorMapModel <VKMapLayer> {
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _animatableRoadShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _animatableTexturedShaderSetupPool;
    struct RenderItemBatcher { 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        struct RenderItem {} *_prototype; 
        struct Pool<ggl::RenderItem> { 
            struct set<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                    struct __tree_node<void *, void *> {} *__begin_node_; 
                    struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > { 
                        struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                            struct __tree_node_base<void *> {} *__left_; 
                        } __first_; 
                    } __pair1_; 
                    struct __compressed_pair<unsigned long, std::__1::less<void *> > { 
                        unsigned long __first_; 
                    } __pair3_; 
                } __tree_; 
            } mAllocatedSlabs; 
            unsigned int mElementsPerSlab; 
            unsigned int mSlabSize; 
            struct FreeList {} *mFreeElement; 
        } _pool; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
    } _batcher;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _casingFacadeRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingFacadeRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingFacadeRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingFacadeShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _casingShadowRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingShadowShaderSetupPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingSidewalkShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingSidewalkShadowShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _casingTopRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingTopRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingTopRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingTopShaderSetupPool;
    struct unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem> > { 
        struct __compressed_pair<ggl::ClearItem *, std::__1::default_delete<ggl::ClearItem> > { 
            struct ClearItem {} *__first_; 
        } __ptr_; 
    } _clearItem;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _coastlineRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _debugRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _debugRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
            struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _debugShaderSetupPool;
    BOOL _disableRealisticLand;
    BOOL _disableRealisticRoads;
    double _fade;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _landRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _landRenderStateWithoutBlending;
    bool _needDebugReset;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _roadRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticRoad::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _roadShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _roadShadowRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _roadShadowShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _roadStencilRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadStencilRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
            struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _roadStencilShaderSetupPool;
    <GEORoutePreloadSession> *_routePreloadSession;
    float _sceneAlpha;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _sidewalkShadowRenderItemPool;
    VKSkyModel *_skyModel;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _texturedRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticTexture::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _texturedShaderSetupPool;
    struct shared_ptr<ggl::AnimatableTexture::VariantUniformData> { 
        struct VariantUniformData {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _variantData;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _waterRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _waterRenderStateWithoutBlending;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL disableRealisticLand;
@property (nonatomic) BOOL disableRealisticRoads;
@property (readonly) unsigned int hash;
@property (nonatomic, retain) <GEORoutePreloadSession> *routePreloadSession;
@property (nonatomic) float sceneAlpha;
@property (nonatomic, retain) VKSkyModel *skyModel;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (double)_calculateZoomLevelWithContext:(id)arg1;
- (void)appendDebugPreloadMissesToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; struct RenderQueue {} *x3; struct ClearItem {} *x4; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_5_1_1; struct RenderItem {} **x_5_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_5_1_3; } x5; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_6_1_1; struct Texture2DLoadItem {} *x_6_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_7_1_1; struct BufferLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_8_1_1; unsigned int x_8_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_8_1_3; } x8; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_9_1_3; } x9; id x10; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; const void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; in void*x28; double x29; void*x30; void*x31; void*x32; in void*x33; out void*x34; double x35; void*x36; void*x37; void*x38; void*x39; void*x40; short x41; void*x42; void*x43; void*x44; double x45; void*x46; SEL x47; void*x48; SEL x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; SEL x57; void*x58; SEL x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; const void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; in void*x74; out void*x75; double x76; void*x77; void*x78; void*x79; void*x80; void*x81; unsigned int x82/* : ? */; void*x83; void*x84; void*x85; short x86; void*x87; void*x88; void*x89; void*x90; void*x91; void x92; void*x93; out void*x94; int x95; void*x96; double x97; void*x98; void*x99; void*x100; char *x101; void*x102; void*x103; void*x104; void*x105; void*x106; char *x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; short x115; void*x116; void*x117; void*x118; double x119; void*x120; SEL x121; void*x122; SEL x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; SEL x131; void*x132; SEL x133; void*x134; void*x135; void*x136; long x137; void*x138; long x139; void*x140; out void*x141; BOOL x142; void*x143; void*x144; void*x145; void*x146; void*x147; out void*x148; const void*x149; void*x150; void*x151; short x152; void*x153; void*x154; void*x155; double x156; void*x157; SEL x158; void*x159; SEL x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; SEL x168; void*x169; SEL x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; const void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; in void*x185; out void*x186; double x187; void*x188; void*x189; void*x190; void*x191; void*x192; void x193; void*x194; out void*x195; int x196; void*x197; double x198; void*x199; void*x200; void*x201; char *x202; void*x203; void*x204; void*x205; void*x206; void*x207; void x208; void*x209; out void*x210; int x211; void*x212; double x213; void*x214; void*x215; void*x216; char *x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; struct x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; short x285; void*x286; void*x287; void*x288; const void*x289; void*x290; void*x291; BOOL x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; const void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; in void*x313; double x314; void*x315; void*x316; void*x317; in void*x318; out void*x319; double x320; void*x321; void*x322; void*x323; void*x324; void*x325; short x326; void*x327; void*x328; void*x329; double x330; void*x331; SEL x332; void*x333; SEL x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; SEL x342; void*x343; SEL x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; const void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; in void*x359; out void*x360; double x361; void*x362; void*x363; void*x364; void*x365; void*x366; unsigned int x367/* : ? */; void*x368; void*x369; void*x370; short x371; void*x372; void*x373; void*x374; void*x375; void*x376; void x377; void*x378; short x379; void*x380; void*x381; void*x382; const void*x383; void*x384; void*x385; BOOL x386; void*x387; void*x388; void*x389; void*x390; void*x391; double x392; void*x393; void*x394; void*x395; long long x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; out void*x408; SEL x409; void*x410; SEL x411; void*x412; float x413; void*x414; void*x415; void*x416; short x417; void*x418; void*x419; void*x420; void*x421; void*x422; short x423; void*x424; void*x425; void*x426; void*x427; void*x428; const void*x429; void*x430; void*x431; double x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; const void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; void*x446; long x447; void*x448; SEL x449; void*x450; SEL x451; void*x452; unsigned long long x453; void*x454; void*x455; void*x456; void*x457; void*x458; const void*x459; void*x460; void*x461; unsigned int x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; short x476; void*x477; void*x478; void*x479; double x480; void*x481; SEL x482; void*x483; SEL x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; void*x491; SEL x492; void*x493; SEL x494; void*x495; void*x496; void*x497; long x498; void*x499; long x500; void*x501; out void*x502; BOOL x503; void*x504; void*x505; void*x506; void*x507; void*x508; out void*x509; const void*x510; void*x511; void*x512; void*x513; void*x514; void*x515; void*x516; out void*x517; SEL x518; void*x519; SEL x520; void*x521; float x522; void*x523; void*x524; void*x525; short x526; void*x527; void*x528; void*x529; void*x530; void*x531; short x532; void*x533; void*x534; void*x535; void*x536; void*x537; const void*x538; void*x539; void*x540; double x541; void*x542; void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; const void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; long x556; void*x557; SEL x558; void*x559; SEL x560; void*x561; unsigned long long x562; void*x563; void*x564; void*x565; void*x566; void*x567; const void*x568; void*x569; void*x570; unsigned int x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; struct x591; void*x592; void*x593; void*x594; short x595; void*x596; void*x597; void*x598; const void*x599; void*x600; void*x601; BOOL x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; void*x611; short x612; void*x613; void*x614; void*x615; long x616; void*x617; int x618; void*x619; void*x620; void*x621; void*x622; void*x623; unsigned int x624/* : ? */; void*x625; void*x626; void*x627; float x628; void*x629; float x630; void*x631; void*x632; void*x633; const void*x634; void*x635; void*x636; void*x637; void*x638; void*x639; void*x640; out void*x641; SEL x642; void*x643; SEL x644; void*x645; float x646; void*x647; void*x648; void*x649; short x650; void*x651; void*x652; void*x653; void*x654; void*x655; short x656; void*x657; void*x658; void*x659; void*x660; void*x661; const void*x662; void*x663; void*x664; double x665; void*x666; void*x667; void*x668; void*x669; void*x670; void*x671; void*x672; const void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; void*x679; long x680; void*x681; SEL x682; void*x683; SEL x684; void*x685; unsigned long long x686; void*x687; void*x688; void*x689; void*x690; void*x691; const void*x692; void*x693; void*x694; unsigned int x695; void*x696; void*x697; void*x698; void*x699; void*x700; void*x701; void*x702; void*x703; void*x704; void*x705; void*x706; char *x707; void*x708; void*x709; void*x710; void*x711; void*x712; short x713; void*x714; void*x715; void*x716; double x717; void*x718; SEL x719; void*x720; SEL x721; void*x722; void*x723; void*x724; void*x725; void*x726; void*x727; void*x728; SEL x729; void*x730; SEL x731; void*x732; void*x733; void*x734; long x735; void*x736; long x737; void*x738; out void*x739; BOOL x740; void*x741; void*x742; void*x743; void*x744; void*x745; out void*x746; const void*x747; void*x748; void*x749; void*x750; void*x751; void*x752; void*x753; out void*x754; SEL x755; void*x756; SEL x757; void*x758; float x759; void*x760; void*x761; void*x762; short x763; void*x764; void*x765; void*x766; void*x767; void*x768; short x769; void*x770; void*x771; void*x772; void*x773; void*x774; const void*x775; void*x776; void*x777; double x778; void*x779; void*x780; void*x781; void*x782; void*x783; void*x784; void*x785; const void*x786; void*x787; void*x788; void*x789; void*x790; void*x791; void*x792; long x793; void*x794; SEL x795; void*x796; SEL x797; void*x798; unsigned long long x799; void*x800; void*x801; void*x802; void*x803; void*x804; const void*x805; void*x806; void*x807; unsigned int x808; void*x809; void*x810; void*x811; void*x812; void*x813; void*x814; void*x815; void*x816; void*x817; void*x818; void*x819; char *x820; void*x821; void*x822; void*x823; void*x824; void*x825; void*x826; void*x827; void*x828; void*x829; struct x830; void*x831; void*x832; void*x833; short x834; void*x835; void*x836; void*x837; const void*x838; void*x839; void*x840; BOOL x841; void*x842; void*x843; void*x844; void*x845; void*x846; float x847; void*x848; void*x849; void*x850; short x851; void*x852; void*x853; void*x854; void*x855; void*x856; short x857; void*x858; void*x859; void*x860; void*x861; void*x862; const void*x863; void*x864; void*x865; double x866; void*x867; void*x868; void*x869; void*x870; void*x871; void*x872; void*x873; const void*x874; void*x875; void*x876; void*x877; void*x878; void*x879; void*x880; long x881; void*x882; SEL x883; void*x884; SEL x885; void*x886; unsigned long long x887; void*x888; void*x889; void*x890; void*x891; void*x892; const void*x893; void*x894; void*x895; unsigned int x896; void*x897; void*x898; void*x899; void*x900; void*x901; void*x902; void*x903; void*x904; void*x905; void*x906; void*x907; struct x908; void*x909; }*)arg1 inContext:(id)arg2 forScene:(id)arg3;
- (void)appendDebugPreloadStatusToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; struct RenderQueue {} *x3; struct ClearItem {} *x4; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_5_1_1; struct RenderItem {} **x_5_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_5_1_3; } x5; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_6_1_1; struct Texture2DLoadItem {} *x_6_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_7_1_1; struct BufferLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_8_1_1; unsigned int x_8_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_8_1_3; } x8; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_9_1_3; } x9; id x10; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; SEL x25; void*x26; SEL x27; void*x28; void*x29; void*x30; long x31; void*x32; long x33; void*x34; out void*x35; BOOL x36; void*x37; void*x38; void*x39; void*x40; void*x41; out void*x42; const void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; long x50; void*x51; SEL x52; void*x53; SEL x54; void*x55; void*x56; void*x57; void*x58; void*x59; in void*x60; double x61; void*x62; int x63; void*x64; in void*x65; void*x66; void*x67; unsigned long long x68; void*x69; void*x70; void*x71; void*x72; void*x73; const void*x74; void*x75; void*x76; void*x77; void*x78; char *x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; struct x89; void*x90; void*x91; void*x92; short x93; void*x94; void*x95; void*x96; const void*x97; void*x98; void*x99; BOOL x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; in void*x110; double x111; void*x112; int x113; void*x114; in void*x115; void*x116; void*x117; unsigned long long x118; void*x119; void*x120; void*x121; void*x122; void*x123; const void*x124; void*x125; void*x126; void*x127; void*x128; struct x129; void*x130; }*)arg1 inContext:(id)arg2 forScene:(id)arg3;
- (void)appendLandCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; struct RenderQueue {} *x3; struct ClearItem {} *x4; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_5_1_1; struct RenderItem {} **x_5_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_5_1_3; } x5; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_6_1_1; struct Texture2DLoadItem {} *x_6_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_7_1_1; struct BufferLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_8_1_1; unsigned int x_8_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_8_1_3; } x8; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_9_1_3; } x9; id x10; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void x21; void*x22; out void*x23; int x24; void*x25; double x26; void*x27; char *x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; int x40; void*x41; in void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void x57; void*x58; out void*x59; int x60; void*x61; double x62; void*x63; char *x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; int x76; void*x77; in void*x78; void*x79; void*x80; void x81; void*x82; out void*x83; int x84; void*x85; double x86; void*x87; char *x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void x100; void*x101; out void*x102; int x103; void*x104; double x105; void*x106; char *x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void x119; void*x120; out void*x121; int x122; void*x123; double x124; void*x125; char *x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; in void*x140; short x141; void*x142; int x143; void*x144; void*x145; void*x146; in void*x147; void*x148; void*x149; double x150; void*x151; void*x152; void*x153; long x154; void*x155; out void*x156; in void*x157; void*x158; void*x159; void*x160; void*x161; long x162; void*x163; out void*x164; in void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void x180; void*x181; out void*x182; int x183; void*x184; double x185; void*x186; char *x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void x199; void*x200; out void*x201; int x202; void*x203; double x204; void*x205; char *x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void x218; void*x219; out void*x220; int x221; void*x222; double x223; void*x224; char *x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void x237; void*x238; out void*x239; int x240; void*x241; double x242; void*x243; char *x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void x256; void*x257; out void*x258; int x259; void*x260; double x261; void*x262; char *x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; BOOL x275; void*x276; out void*x277; in void*x278; short x279; void*x280; void*x281; void*x282; void*x283; void*x284; void x285; void*x286; out void*x287; int x288; void*x289; double x290; void*x291; char *x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void x304; void*x305; out void*x306; int x307; void*x308; double x309; void*x310; char *x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void x323; void*x324; out void*x325; int x326; void*x327; double x328; void*x329; char *x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void x342; void*x343; out void*x344; int x345; void*x346; double x347; void*x348; char *x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void x361; void*x362; out void*x363; int x364; void*x365; double x366; void*x367; char *x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; void*x377; short x378; void*x379; void*x380; void*x381; const void*x382; void*x383; void*x384; BOOL x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; void*x394; short x395; void*x396; void*x397; void*x398; long x399; void*x400; int x401; void*x402; void*x403; void*x404; void*x405; void*x406; unsigned int x407/* : ? */; void*x408; void*x409; void*x410; float x411; void*x412; float x413; void*x414; void*x415; void*x416; const void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; long x424; void*x425; SEL x426; void*x427; SEL x428; void*x429; void*x430; void*x431; void*x432; void*x433; in void*x434; double x435; void*x436; int x437; void*x438; in void*x439; void*x440; void*x441; unsigned long long x442; void*x443; void*x444; void*x445; void*x446; void*x447; const void*x448; void*x449; void*x450; void*x451; void*x452; char *x453; void*x454; void*x455; void*x456; void*x457; void*x458; short x459; void*x460; void*x461; void*x462; double x463; void*x464; SEL x465; void*x466; SEL x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; SEL x475; void*x476; SEL x477; void*x478; void*x479; void*x480; long x481; void*x482; long x483; void*x484; out void*x485; BOOL x486; void*x487; void*x488; void*x489; void*x490; void*x491; out void*x492; const void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; void*x499; long x500; void*x501; SEL x502; void*x503; SEL x504; void*x505; void*x506; void*x507; void*x508; void*x509; in void*x510; double x511; void*x512; int x513; void*x514; in void*x515; void*x516; void*x517; unsigned long long x518; void*x519; void*x520; void*x521; void*x522; void*x523; const void*x524; void*x525; void*x526; void*x527; void*x528; char *x529; void*x530; void*x531; void*x532; void*x533; void*x534; void*x535; void*x536; void*x537; void*x538; struct x539; void*x540; void*x541; void*x542; short x543; void*x544; void*x545; void*x546; const void*x547; void*x548; void*x549; BOOL x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; in void*x560; double x561; void*x562; int x563; void*x564; in void*x565; void*x566; void*x567; unsigned long long x568; void*x569; void*x570; void*x571; void*x572; void*x573; const void*x574; void*x575; void*x576; void*x577; void*x578; struct x579; void*x580; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)appendRoadCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; struct RenderQueue {} *x3; struct ClearItem {} *x4; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_5_1_1; struct RenderItem {} **x_5_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_5_1_3; } x5; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_6_1_1; struct Texture2DLoadItem {} *x_6_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_7_1_1; struct BufferLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_8_1_1; unsigned int x_8_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_8_1_3; } x8; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_9_1_3; } x9; id x10; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; SEL x19; void*x20; long x21; long x22; out BOOL x23; void*x24; void*x25; out const void*x26; void*x27; void*x28; out SEL x29; SEL x30; float x31; void*x32; short x33; void*x34; void*x35; short x36; void*x37; void*x38; const void*x39; double x40; void*x41; void*x42; void*x43; const void*x44; void*x45; void*x46; long x47; SEL x48; SEL x49; unsigned long long x50; void*x51; void*x52; const void*x53; unsigned int x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; struct  unsigned long x_3_2_1;  {} x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)appendStencilCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; struct RenderQueue {} *x3; struct ClearItem {} *x4; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_5_1_1; struct RenderItem {} **x_5_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_5_1_3; } x5; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_6_1_1; struct Texture2DLoadItem {} *x_6_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_7_1_1; struct BufferLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_8_1_1; unsigned int x_8_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_8_1_3; } x8; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_9_1_3; } x9; id x10; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; long x21; void*x22; long x23; void*x24; out void*x25; BOOL x26; void*x27; void*x28; void*x29; void*x30; void*x31; out void*x32; const void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; long x40; void*x41; SEL x42; void*x43; SEL x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; const void*x56; void*x57; void*x58; void*x59; void*x60; long doublex61; void*x62; unsigned long x63; void*x64; out void*x65; void*x66; void*x67; double x68; void*x69; unsigned int x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; struct x86; void*x87; void*x88; void*x89; short x90; void*x91; void*x92; void*x93; const void*x94; void*x95; void*x96; BOOL x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; const void*x113; void*x114; void*x115; void*x116; void*x117; long doublex118; void*x119; unsigned long x120; void*x121; out void*x122; void*x123; void*x124; double x125; void*x126; unsigned int x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; struct x137; void*x138; }*)arg1 inContext:(id)arg2;
- (void)appendWaterCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; struct RenderQueue {} *x3; struct ClearItem {} *x4; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_5_1_1; struct RenderItem {} **x_5_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_5_1_3; } x5; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_6_1_1; struct Texture2DLoadItem {} *x_6_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_7_1_1; struct BufferLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_8_1_1; unsigned int x_8_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_8_1_3; } x8; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_9_1_3; } x9; id x10; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; out void*x19; int x20; void*x21; double x22; void*x23; void*x24; void*x25; char *x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; struct x36; void*x37; void*x38; void*x39; short x40; void*x41; void*x42; void*x43; const void*x44; void*x45; void*x46; BOOL x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; const void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void x66; void*x67; out void*x68; int x69; void*x70; double x71; void*x72; void*x73; void*x74; char *x75; void*x76; void*x77; void*x78; void*x79; void*x80; short x81; void*x82; void*x83; void*x84; double x85; void*x86; SEL x87; void*x88; SEL x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; SEL x97; void*x98; SEL x99; void*x100; long x101; void*x102; void*x103; void*x104; short x105; void*x106; short x107; void*x108; void*x109; void*x110; void x111; void*x112; out void*x113; int x114; void*x115; double x116; void*x117; void*x118; void*x119; char *x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; short x128; void*x129; void*x130; void*x131; double x132; void*x133; SEL x134; void*x135; SEL x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; SEL x144; void*x145; SEL x146; void*x147; void*x148; void*x149; long x150; void*x151; long x152; void*x153; out void*x154; BOOL x155; void*x156; void*x157; void*x158; void*x159; void*x160; out void*x161; const void*x162; void*x163; void*x164; void x165; void*x166; out void*x167; int x168; void*x169; double x170; void*x171; void*x172; void*x173; char *x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; struct x184; void*x185; void*x186; void*x187; short x188; void*x189; void*x190; void*x191; const void*x192; void*x193; void*x194; BOOL x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; const void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; in void*x214; out void*x215; double x216; void*x217; void*x218; void*x219; void*x220; void*x221; void x222; void*x223; out void*x224; int x225; void*x226; double x227; void*x228; void*x229; void*x230; char *x231; void*x232; void*x233; void*x234; void*x235; void*x236; void x237; void*x238; out void*x239; int x240; void*x241; double x242; void*x243; void*x244; void*x245; char *x246; void*x247; void*x248; void*x249; void*x250; void*x251; struct x252; void*x253; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)dealloc;
- (void)didReceiveMemoryWarning:(BOOL)arg1;
- (BOOL)disableRealisticLand;
- (BOOL)disableRealisticRoads;
- (void)flushPools;
- (void)gatherRenderingPreloadItems:(struct vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem> > { struct ShaderLoadItem {} *x1; struct ShaderLoadItem {} *x2; struct __compressed_pair<ggl::ShaderLoadItem *, std::__1::allocator<ggl::ShaderLoadItem> > { struct ShaderLoadItem {} *x_3_1_1; } x3; }*)arg1;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (id)init;
- (unsigned long long)mapLayerPosition;
- (BOOL)minimumZoomLevelBoundsCamera;
- (void)reset;
- (void)resetDebugPools:(id)arg1;
- (void)resetPools;
- (id)routePreloadSession;
- (float)sceneAlpha;
- (void)setDisableRealisticLand:(BOOL)arg1;
- (void)setDisableRealisticRoads:(BOOL)arg1;
- (void)setRoutePreloadSession:(id)arg1;
- (void)setSceneAlpha:(float)arg1;
- (void)setSkyModel:(id)arg1;
- (void)setupRealisticUniformBuffer:(struct RealisticUniformData { unsigned int x1; unsigned int x2; struct UniformCReflection {} *x3; struct vector<unsigned char, std::__1::allocator<unsigned char> > { char *x_4_1_1; char *x_4_1_2; struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > { char *x_3_2_1; } x_4_1_3; } x4; }*)arg1 forTile:(id)arg2;
- (id)skyModel;
- (void)stylesheetDidChange;
- (void)stylesheetDoneChanging;
- (void)stylesheetTransitionDidProgress;
- (void)stylesheetWillTransition:(unsigned int)arg1;
- (BOOL)wantsCategorizedSourceTiles;
- (void)willStartDrawingTiles:(id)arg1;

@end
