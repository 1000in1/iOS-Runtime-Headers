/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@interface VKFootprint : NSObject {
    struct { 
        double x0; 
        double x1; 
        double y0; 
        double y1; 
    struct VKFootprintConvexHull_struct { 
        int edgeCount; 
        struct VKPoint { 
            double x; 
            double y; 
            double z; 
        } edgeOrigin[6]; 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } edgeNormal[6]; 
    struct VKPoint { 
        double x; 
        double y; 
        double z; 
    struct VKPoint { 
        double x; 
        double y; 
        double z; 
    struct VKPoint { 
        double x; 
        double y; 
        double z; 
    } _boundingRect;
    double _centerDepth;
    } _convexHull;
    int _cornerGroundPointsCount;
    } _cornerGroundPoints[12];
    } _furthestGroundPoint;
    double _maxDepth;
    double _maxDistance;
    double _minDepth;
    double _minDistance;
    } _nearestGroundPoint;
}

@property(readonly) struct VKFootprintConvexHull_struct { int x1; struct VKPoint { double x_2_1_1; double x_2_1_2; double x_2_1_3; } x2[6]; /* Warning: unhandled struct encoding: '{Matrix<double' */ struct x3[6]; void*x4; void*x5; void*x6; void*x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; oneway unsigned char x22; void*x23; void*x24; void*x25; void*x26; const void*x27; unsigned int x28; in void*x29; void*x30; void*x31; unsigned int x32; in void*x33; void*x34; const in void*x35; long x36; void*x37; void*x38; int x39; void*x40; void*x41; void*x42; BOOL x43; out const double x44; void*x45; const void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; id x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; oneway unsigned char x93; void*x94; void*x95; void*x96; void*x97; const void*x98; unsigned int x99; in void*x100; void*x101; void*x102; unsigned int x103; in void*x104; void*x105; const in void*x106; long x107; void*x108; void*x109; int x110; void*x111; void*x112; void*x113; BOOL x114; out const double x115; void*x116; const void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; unsigned short x132; void*x133; short x134; void*x135; void*x136; void*x137; void*x138; unsigned long x139; int x140; unsigned int x141/* : ? */; const void*x142; const void*x143; void*x144; void*x145; const void*x146; void*x147; void*x148; void*x149; out const void*x150; short x151; void*x152; void*x153; oneway void*x154; out void*x155; in double x156; void*x157; void*x158; int x159; out in void*x160; float x161; const void*x162; void*x163; void*x164; void*x165; out const void*x166; void*x167; void*x168; oneway void*x169; out void*x170; in double x171; void*x172; void*x173; int x174; out in void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; in void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; char *x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; Class x255; void*x256; unsigned short x257; unsigned char x258; void*x259; unsigned char x260; void*x261; void*x262; const void*x263; void*x264; void*x265; int x266; short x267; unsigned short x268; void*x269; const int x270; void*x271; short x272; unsigned long x273; void*x274; unsigned int x275/* : ? */; void*x276; long x277; short x278; unsigned long x279; void*x280; void*x281; out void*x282; void*x283; unsigned int x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; boolx301; void*x302; void*x303; void*x304; boolx305; void*x306; void*x307; void*x308; boolx309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; Class x332; void*x333; unsigned short x334; unsigned char x335; void*x336; unsigned char x337; void*x338; void*x339; const void*x340; void*x341; void*x342; int x343; short x344; unsigned short x345; void*x346; const int x347; void*x348; short x349; unsigned long x350; void*x351; unsigned int x352/* : ? */; void*x353; long x354; short x355; unsigned long x356; void*x357; void*x358; out void*x359; void*x360; unsigned int x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; unsigned char x377; void*x378; unsigned short x379; void*x380; short x381; void*x382; void*x383; void*x384; void*x385; unsigned long x386; int x387; unsigned int x388/* : ? */; const void*x389; const void*x390; void*x391; void*x392; const int x393; void x394; void*x395; void*x396; void*x397; void*x398; const void*x399; void*x400; void*x401; void*x402; out const void*x403; short x404; void*x405; int x406; void*x407; out const void*x408; unsigned int x409; void*x410; void*x411; out const void*x412; void*x413; float x414; const void*x415; void*x416; void*x417; void*x418; out const void*x419; void*x420; int x421; void*x422; out const void*x423; unsigned int x424; void*x425; void*x426; out const void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; unsigned long x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; unsigned long x478; void*x479; void*x480; void*x481; unsigned int x482/* : ? */; void*x483; void*x484; void*x485; long x486; void*x487; void*x488; void*x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; const void*x498; void*x499; void*x500; void*x501; void*x502; struct x503; void*x504; } convexHull; /* unknown property attribute:  1>=[3d]}]} */
@property(readonly) struct { double x1; double x2; double x3; double x4; } boundingRect;
@property(readonly) double centerDepth;
@property(readonly) struct VKPoint { double x1; double x2; double x3; }* cornerGroundPoints;
@property(readonly) int cornerGroundPointsCount;
@property(readonly) struct VKPoint { double x1; double x2; double x3; } furthestGroundPoint;
@property(readonly) double maxDepth;
@property(readonly) double minDepth;
@property(readonly) struct VKPoint { double x1; double x2; double x3; } nearestGroundPoint;

- (id).cxx_construct;
- (struct { double x1; double x2; double x3; double x4; })_expandedBoundingRect;
- (id)annotationCoordinateTest;
- (id)annotationRectTest;
- (struct { double x1; double x2; double x3; double x4; })boundingRect;
- (double)centerDepth;
- (void)computeFromCamera:(id)arg1;
- (BOOL)containsGroundPoint:(struct VKPoint { double x1; double x2; double x3; }*)arg1;
- (struct VKFootprintConvexHull_struct { int x1; struct VKPoint { double x_2_1_1; double x_2_1_2; double x_2_1_3; } x2[6]; struct Matrix<double, 3, 1> { double x_3_1_1[3]; } x3[6]; })convexHull;
- (struct VKPoint { double x1; double x2; double x3; }*)cornerGroundPoints;
- (int)cornerGroundPointsCount;
- (struct VKPoint { double x1; double x2; double x3; })furthestGroundPoint;
- (double)maxDepth;
- (double)minDepth;
- (struct VKPoint { double x1; double x2; double x3; })nearestGroundPoint;
- (BOOL)rejectsRect:(const struct { double x1; double x2; double x3; double x4; }*)arg1;

@end
