/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
 */

@class <SBFGlintyStringViewDelegate>, NSString, NSTimer, SBFGlintyStringSettings, UIColor, UIFont, UIImage, UILabel, UIView, _SBFVibrantSettings, _UILegibilitySettings;

@interface SBFGlintyStringView : UIView <_UISettingsKeyPathObserver> {
    struct CGSize { 
        float width; 
        float height; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    BOOL _adjustsFontSizeToFitWidth;
    BOOL _animationRepeats;
    UIColor *_backgroundColor;
    UIView *_backgroundContainer;
    UIView *_backgroundSnapshotView;
    UIView *_backgroundView;
    UIImage *_chevron;
    UIColor *_chevronBackgroundColor;
    } _chevronFrame;
    UIView *_chevronGlimmer;
    BOOL _chevronGlimmerAnimatesBackgroundColor;
    UIColor *_chevronGlimmerColor;
    int _chevronStyle;
    UIImage *_clearMaskImage;
    <SBFGlintyStringViewDelegate> *_delegate;
    UIColor *_effectiveChevronBackgroundColor;
    UIFont *_font;
    BOOL _hasCustomBackgroundColor;
    BOOL _hidden;
    BOOL _highlight;
    UIView *_highlightLimitingView;
    UIView *_highlightView;
    float _horizontalPadding;
    UILabel *_label;
    } _labelSize;
    _UILegibilitySettings *_legibilitySettings;
    BOOL _needsTextUpdate;
    SBFGlintyStringSettings *_settings;
    } _spotlightAnimationEndFrame;
    } _spotlightAnimationStartFrame;
    double _spotlightPointTraversalTime;
    UIView *_spotlightView;
    NSString *_text;
    int _textIndex;
    NSString *_textLanguage;
    UIImage *_textMaskImage;
    NSTimer *_timer;
    UIView *_tintView;
    _SBFVibrantSettings *_vibrantSettings;
}

@property BOOL adjustsFontSizeToFitWidth;
@property BOOL animationRepeats;
@property(retain) UIColor * backgroundColor;
@property(retain) UIView * backgroundContainer;
@property(retain) UIView * backgroundSnapshotView;
@property(retain) UIView * backgroundView;
@property(retain) UIImage * chevron;
@property(retain) UIColor * chevronBackgroundColor;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } chevronFrame;
@property(retain) UIView * chevronGlimmer;
@property BOOL chevronGlimmerAnimatesBackgroundColor;
@property(retain) UIColor * chevronGlimmerColor;
@property int chevronStyle;
@property(retain) UIImage * clearMaskImage;
@property <SBFGlintyStringViewDelegate> * delegate;
@property(retain) UIColor * effectiveChevronBackgroundColor;
@property(retain) UIFont * font;
@property BOOL hasCustomBackgroundColor;
@property BOOL hidden;
@property BOOL highlight;
@property(retain) UIView * highlightLimitingView;
@property(retain) UIView * highlightView;
@property float horizontalPadding;
@property(retain) UILabel * label;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } labelFrame;
@property struct CGSize { float x1; float x2; } labelSize;
@property(retain) _UILegibilitySettings * legibilitySettings;
@property BOOL needsTextUpdate;
@property(retain) SBFGlintyStringSettings * settings;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } spotlightAnimationEndFrame;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } spotlightAnimationStartFrame;
@property double spotlightPointTraversalTime;
@property(retain) UIView * spotlightView;
@property(copy) NSString * text;
@property int textIndex;
@property(copy) NSString * textLanguage;
@property(retain) UIImage * textMaskImage;
@property(retain) NSTimer * timer;
@property(retain) UIView * tintView;
@property(retain) _SBFVibrantSettings * vibrantSettings;

- (float)_chevronHeightWithMaxOffset;
- (id)_chevronImageForStyle:(int)arg1;
- (float)_chevronPadding;
- (float)_chevronVerticalOffset;
- (float)_chevronWidthWithPadding;
- (float)_chevronWidthWithPaddingCompression:(float)arg1;
- (id)_highlightColor;
- (id)_highlightCompositingFilter;
- (BOOL)_shouldUseLightStyle;
- (id)_spotlightColor;
- (id)_spotlightCompositingFilter;
- (id)_spotlightImage;
- (void)_updateChevronGlimmer;
- (void)_updateClearMaskWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_updateHighlight;
- (void)_updateHighlightLimitingView;
- (void)_updateLabelSpotlight;
- (void)_updateLabelWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_updateMaskWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_updateTintView;
- (BOOL)adjustsFontSizeToFitWidth;
- (void)animate;
- (void)animateChevronGlimmer;
- (void)animateSpotlight;
- (void)animationDidStop:(id)arg1 finished:(BOOL)arg2;
- (BOOL)animationRepeats;
- (id)backgroundColor;
- (id)backgroundContainer;
- (id)backgroundSnapshotView;
- (id)backgroundView;
- (float)baselineOffsetFromBottom;
- (id)chevron;
- (id)chevronBackgroundColor;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })chevronFrame;
- (id)chevronGlimmer;
- (BOOL)chevronGlimmerAnimatesBackgroundColor;
- (id)chevronGlimmerColor;
- (int)chevronStyle;
- (id)clearMaskImage;
- (void)dealloc;
- (id)delegate;
- (void)didMoveToWindow;
- (id)effectiveChevronBackgroundColor;
- (id)fadeAnimation;
- (void)fadeIn;
- (id)fadeInAnimation;
- (void)fadeOut;
- (id)fadeOutAnimation;
- (id)font;
- (BOOL)hasCustomBackgroundColor;
- (BOOL)hidden;
- (void)hide;
- (BOOL)highlight;
- (id)highlightLimitingView;
- (id)highlightView;
- (float)horizontalPadding;
- (id)initWithText:(id)arg1 andFont:(id)arg2;
- (BOOL)isAnimating;
- (id)label;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })labelFrame;
- (struct CGSize { float x1; float x2; })labelSize;
- (void)layoutSubviews;
- (id)legibilitySettings;
- (BOOL)needsTextUpdate;
- (void)setAdjustsFontSizeToFitWidth:(BOOL)arg1;
- (void)setAnimationRepeats:(BOOL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBackgroundContainer:(id)arg1;
- (void)setBackgroundSnapshotView:(id)arg1;
- (void)setBackgroundView:(id)arg1;
- (void)setChevron:(id)arg1;
- (void)setChevronBackgroundColor:(id)arg1;
- (void)setChevronFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setChevronGlimmer:(id)arg1;
- (void)setChevronGlimmerAnimatesBackgroundColor:(BOOL)arg1;
- (void)setChevronGlimmerColor:(id)arg1;
- (void)setChevronStyle:(int)arg1;
- (void)setClearMaskImage:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEffectiveChevronBackgroundColor:(id)arg1;
- (void)setFont:(id)arg1;
- (void)setHasCustomBackgroundColor:(BOOL)arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setHighlight:(BOOL)arg1;
- (void)setHighlightLimitingView:(id)arg1;
- (void)setHighlightView:(id)arg1;
- (void)setHorizontalPadding:(float)arg1;
- (void)setLabel:(id)arg1;
- (void)setLabelSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setLegibilitySettings:(id)arg1;
- (void)setMaskImage:(id)arg1;
- (void)setNeedsTextUpdate:(BOOL)arg1;
- (void)setSettings:(id)arg1;
- (void)setSpotlightAnimationEndFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setSpotlightAnimationStartFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setSpotlightPointTraversalTime:(double)arg1;
- (void)setSpotlightView:(id)arg1;
- (void)setText:(id)arg1;
- (void)setTextIndex:(int)arg1;
- (void)setTextLanguage:(id)arg1;
- (void)setTextMaskImage:(id)arg1;
- (void)setTimer:(id)arg1;
- (void)setTintView:(id)arg1;
- (void)setVibrantSettings:(id)arg1;
- (void)settings:(id)arg1 changedValueForKeyPath:(id)arg2;
- (id)settings;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })spotlightAnimationEndFrame;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })spotlightAnimationStartFrame;
- (double)spotlightPointTraversalTime;
- (id)spotlightView;
- (void)startAnimating;
- (void)stopAnimating;
- (id)text;
- (int)textIndex;
- (id)textLanguage;
- (id)textMaskImage;
- (id)timer;
- (id)tintView;
- (void)updateText;
- (id)vibrantSettings;

@end
