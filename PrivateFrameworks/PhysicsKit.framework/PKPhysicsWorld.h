/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhysicsKit.framework/PhysicsKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class <PKPhysicsContactDelegate>, NSMutableArray, NSMutableDictionary;

@interface PKPhysicsWorld : NSObject <NSCoding> {
    struct b2Vec2 { 
        float x; 
        float y; 
    struct PKContactListener { 
        int (**_vptr$b2ContactListener)(); 
        NSMutableDictionary *_contacts; 
        <PKPhysicsContactDelegate> *_contactDelegate; 
    struct PKDebugDrawPacket { 
        struct vector<PKPoint, std::__1::allocator<PKPoint> > { 
            struct { /* ? */ } *__begin_; 
            struct { /* ? */ } *__end_; 
            struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { 
                struct { /* ? */ } *__first_; 
            } __end_cap_; 
        } _linePoints; 
        struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> > { 
            struct { /* ? */ } *__begin_; 
            struct { /* ? */ } *__end_; 
            struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> > { 
                struct { /* ? */ } *__first_; 
            } __end_cap_; 
        } _colors; 
    double _accumulatedDt;
    NSMutableArray *_bodies;
    } _contactListener;
    NSMutableArray *_fields;
    } _gravity;
    NSMutableArray *_joints;
    NSMutableArray *_postStepBlocks;
    float _speed;
    struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_3_1; struct b2TreeNode {} *x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; unsigned int x_1_3_6; int x_1_3_7; } x_1_2_1; int x_1_2_2; int *x_1_2_3; int x_1_2_4; int x_1_2_5; struct b2Pair {} *x_1_2_6; int x_1_2_7; int x_1_2_8; int x_1_2_9; } x_3_1_1; struct b2Contact {} *x_3_1_2; int x_3_1_3; struct b2ContactFilter {} *x_3_1_4; struct b2ContactListener {} *x_3_1_5; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct b2PKAether { struct b2Vec2 { float x_1_2_1; float x_1_2_2; } x_8_1_1; struct vector<b2PKField *, std::__1::allocator<b2PKField *> > { struct b2PKField {} **x_2_2_1; struct b2PKField {} **x_2_2_2; struct __compressed_pair<b2PKField **, std::__1::allocator<b2PKField *> > { struct b2PKField {} **x_3_3_1; } x_2_2_3; } x_8_1_2; } x8; boolx9; struct b2DestructionListener {} *x10; struct b2Draw {} *x11; float x12; boolx13; boolx14; boolx15; boolx16; float x17; } *_world;
    bool_doSleep;
    } drawPacket;
}

@property(readonly) struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_3_1; struct b2TreeNode {} *x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; unsigned int x_1_3_6; int x_1_3_7; } x_1_2_1; int x_1_2_2; int *x_1_2_3; int x_1_2_4; int x_1_2_5; struct b2Pair {} *x_1_2_6; int x_1_2_7; int x_1_2_8; int x_1_2_9; } x_3_1_1; struct b2Contact {} *x_3_1_2; int x_3_1_3; struct b2ContactFilter {} *x_3_1_4; struct b2ContactListener {} *x_3_1_5; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct b2PKAether { struct b2Vec2 { float x_1_2_1; float x_1_2_2; } x_8_1_1; /* Warning: unhandled struct encoding: '{vector<b2PKField *' */ struct x_8_1_2; void*x_8_1_3; void*x_8_1_4; void*x_8_1_5; void*x_8_1_6; void*x_8_1_7; void*x_8_1_8; void*x_8_1_9; void*x_8_1_10; void*x_8_1_11; void*x_8_1_12; void*x_8_1_13; void*x_8_1_14; void*x_8_1_15; void*x_8_1_16; SEL x_8_1_17; void*x_8_1_18; void*x_8_1_19; void*x_8_1_20; void*x_8_1_21; void*x_8_1_22; void*x_8_1_23; void*x_8_1_24; void*x_8_1_25; unsigned int x_8_1_26 : 2; void*x_8_1_27; out const long x_8_1_28; double x_8_1_29; void*x_8_1_30; struct b2StackAllocator { BOOL x_31_2_1[102400]; int x_31_2_2; int x_31_2_3; int x_31_2_4; struct b2StackEntry { char *x_5_3_1; int x_5_3_2; boolx_5_3_3; } x_31_2_5[32]; int x_31_2_6; } x_8_1_31; int x_8_1_32; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_4_1; struct b2TreeNode {} *x_1_4_2; int x_1_4_3; int x_1_4_4; int x_1_4_5; unsigned int x_1_4_6; int x_1_4_7; } x_1_3_1; int x_1_3_2; int *x_1_3_3; int x_1_3_4; int x_1_3_5; struct b2Pair {} *x_1_3_6; int x_1_3_7; int x_1_3_8; int x_1_3_9; } x_33_2_1; struct b2Contact {} *x_33_2_2; int x_33_2_3; struct b2ContactFilter {} *x_33_2_4; struct b2ContactListener {} *x_33_2_5; } x_8_1_33; struct b2Body {} *x_8_1_34; struct b2Joint {} *x_8_1_35; int x_8_1_36; int x_8_1_37; struct b2PKAether { struct b2Vec2 { float x_1_3_1; float x_1_3_2; } x_38_2_1; struct x_38_2_2; void*x_38_2_3; void*x_38_2_4; void*x_38_2_5; void*x_38_2_6; void*x_38_2_7; void*x_38_2_8; void*x_38_2_9; void*x_38_2_10; void*x_38_2_11; void*x_38_2_12; void*x_38_2_13; void*x_38_2_14; void*x_38_2_15; void*x_38_2_16; void*x_38_2_17; void*x_38_2_18; SEL x_38_2_19; void*x_38_2_20; void*x_38_2_21; void*x_38_2_22; void*x_38_2_23; void*x_38_2_24; unsigned int x_38_2_25 : 2; unsigned short x_38_2_26; void*x_38_2_27; void*x_38_2_28; BOOL x_38_2_29; void*x_38_2_30; void*x_38_2_31; long x_38_2_32; long x_38_2_33; out BOOL x_38_2_34; void*x_38_2_35; void*x_38_2_36; out const void*x_38_2_37; BOOL x_38_2_38[102400]; int x_38_2_39; int x_38_2_40; int x_38_2_41; struct b2StackEntry { char *x_42_3_1; int x_42_3_2; boolx_42_3_3; } x_38_2_42[32]; int x_38_2_43; } x_8_1_38; int x_8_1_39; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_4_1; struct b2TreeNode {} *x_1_4_2; int x_1_4_3; int x_1_4_4; int x_1_4_5; unsigned int x_1_4_6; int x_1_4_7; } x_1_3_1; int x_1_3_2; int *x_1_3_3; int x_1_3_4; int x_1_3_5; struct b2Pair {} *x_1_3_6; int x_1_3_7; int x_1_3_8; int x_1_3_9; } x_40_2_1; struct b2Contact {} *x_40_2_2; int x_40_2_3; struct b2ContactFilter {} *x_40_2_4; struct b2ContactListener {} *x_40_2_5; } x_8_1_40; struct b2Body {} *x_8_1_41; struct b2Joint {} *x_8_1_42; int x_8_1_43; int x_8_1_44; struct b2PKAether { struct b2Vec2 { float x_1_3_1; float x_1_3_2; } x_45_2_1; struct x_45_2_2; void*x_45_2_3; void*x_45_2_4; void*x_45_2_5; void*x_45_2_6; void*x_45_2_7; void*x_45_2_8; void*x_45_2_9; void*x_45_2_10; void*x_45_2_11; boolx_45_2_12; void*x_45_2_13; bycopy void*x_45_2_14; bycopy void*x_45_2_15; unsigned long x_45_2_16; void*x_45_2_17; void*x_45_2_18; void*x_45_2_19; void*x_45_2_20; void*x_45_2_21; void*x_45_2_22; void*x_45_2_23; void*x_45_2_24; void*x_45_2_25; void*x_45_2_26; void*x_45_2_27; void*x_45_2_28; void*x_45_2_29; void*x_45_2_30; void*x_45_2_31; void*x_45_2_32; void*x_45_2_33; void* x_45_2_34[ /* ? */ ]; void*x_45_2_35; void*x_45_2_36; void*x_45_2_37; void*x_45_2_38; void*x_45_2_39; void*x_45_2_40; void*x_45_2_41; void*x_45_2_42; void*x_45_2_43; void*x_45_2_44; void*x_45_2_45; void*x_45_2_46; void*x_45_2_47; void*x_45_2_48; void*x_45_2_49; void*x_45_2_50; void*x_45_2_51; void*x_45_2_52; void*x_45_2_53; int x_45_2_54; void*x_45_2_55; in void*x_45_2_56; void*x_45_2_57; void*x_45_2_58; void*x_45_2_59; void*x_45_2_60; void*x_45_2_61; void*x_45_2_62; void*x_45_2_63; void*x_45_2_64; void*x_45_2_65; void*x_45_2_66; void*x_45_2_67; void*x_45_2_68; void*x_45_2_69; void*x_45_2_70; void*x_45_2_71; void*x_45_2_72; void*x_45_2_73; void*x_45_2_74; void*x_45_2_75; void*x_45_2_76; void*x_45_2_77; void*x_45_2_78; int x_45_2_79; void*x_45_2_80; in void*x_45_2_81; void*x_45_2_82; void*x_45_2_83; void*x_45_2_84; void*x_45_2_85; void*x_45_2_86; void*x_45_2_87; void*x_45_2_88; void*x_45_2_89; void*x_45_2_90; void*x_45_2_91; void*x_45_2_92; void*x_45_2_93; void*x_45_2_94; void*x_45_2_95; void*x_45_2_96; void*x_45_2_97; void*x_45_2_98; void*x_45_2_99; void*x_45_2_100; void*x_45_2_101; void*x_45_2_102; void*x_45_2_103; int x_45_2_104; void*x_45_2_105; in void*x_45_2_106; void*x_45_2_107; void*x_45_2_108; void*x_45_2_109; void*x_45_2_110; void*x_45_2_111; void*x_45_2_112; void*x_45_2_113; void*x_45_2_114; void*x_45_2_115; void*x_45_2_116; void*x_45_2_117; void*x_45_2_118; void*x_45_2_119; void*x_45_2_120; void*x_45_2_121; void*x_45_2_122; void*x_45_2_123; void*x_45_2_124; void*x_45_2_125; void*x_45_2_126; void*x_45_2_127; void*x_45_2_128; short x_45_2_129; void*x_45_2_130; void*x_45_2_131; void*x_45_2_132; const void*x_45_2_133; void*x_45_2_134; void*x_45_2_135; BOOL x_45_2_136; void*x_45_2_137; void*x_45_2_138; void*x_45_2_139; void*x_45_2_140; void*x_45_2_141; unsigned int x_45_2_142/* : ? */; void*x_45_2_143; void*x_45_2_144; void*x_45_2_145; unsigned short x_45_2_146; void*x_45_2_147; void*x_45_2_148; void*x_45_2_149; void*x_45_2_150; void*x_45_2_151; BOOL x_45_2_152; void*x_45_2_153; void*x_45_2_154; void*x_45_2_155; void*x_45_2_156; void*x_45_2_157; in void*x_45_2_158; void*x_45_2_159; void*x_45_2_160; const void*x_45_2_161; void*x_45_2_162; void*x_45_2_163; void*x_45_2_164; void*x_45_2_165; struct x_45_2_166; void*x_45_2_167; void*x_45_2_168; void*x_45_2_169; BOOL x_45_2_170; void*x_45_2_171; void*x_45_2_172; void*x_45_2_173; void*x_45_2_174; void*x_45_2_175; const void*x_45_2_176; void*x_45_2_177; void*x_45_2_178; char *x_45_2_179; void*x_45_2_180; void*x_45_2_181; void*x_45_2_182; void*x_45_2_183; void*x_45_2_184; void*x_45_2_185; void*x_45_2_186; void*x_45_2_187; void*x_45_2_188; void*x_45_2_189; void*x_45_2_190; void*x_45_2_191; void*x_45_2_192; void*x_45_2_193; void*x_45_2_194; void*x_45_2_195; void*x_45_2_196; void*x_45_2_197; void*x_45_2_198; int x_45_2_199; void*x_45_2_200; in void*x_45_2_201; void*x_45_2_202; void*x_45_2_203; void*x_45_2_204; void*x_45_2_205; void*x_45_2_206; void*x_45_2_207; void*x_45_2_208; void*x_45_2_209; void*x_45_2_210; void*x_45_2_211; void*x_45_2_212; void*x_45_2_213; void*x_45_2_214; void*x_45_2_215; void*x_45_2_216; void*x_45_2_217; void*x_45_2_218; void*x_45_2_219; void*x_45_2_220; void*x_45_2_221; void*x_45_2_222; void*x_45_2_223; unsigned int x_45_2_224/* : ? */; void*x_45_2_225; out void*x_45_2_226; out void*x_45_2_227; long x_45_2_228; void*x_45_2_229; void*x_45_2_230; void*x_45_2_231; void*x_45_2_232; void*x_45_2_233; void*x_45_2_234; void*x_45_2_235; void*x_45_2_236; void*x_45_2_237; void*x_45_2_238; void*x_45_2_239; void*x_45_2_240; void*x_45_2_241; void*x_45_2_242; void*x_45_2_243; void*x_45_2_244; void*x_45_2_245; void*x_45_2_246; void*x_45_2_247; } x_8_1_45; void*x_8_1_46; void*x_8_1_47; void*x_8_1_48; void*x_8_1_49; void*x_8_1_50; void*x_8_1_51; void*x_8_1_52; void*x_8_1_53; void*x_8_1_54; void*x_8_1_55; void*x_8_1_56; void*x_8_1_57; void*x_8_1_58; void*x_8_1_59; void*x_8_1_60; void*x_8_1_61; void*x_8_1_62; void* x_8_1_63[ /* ? */ ]; void*x_8_1_64; void*x_8_1_65; void*x_8_1_66; void*x_8_1_67; void*x_8_1_68; void*x_8_1_69; void*x_8_1_70; void*x_8_1_71; void*x_8_1_72; void*x_8_1_73; void*x_8_1_74; int x_8_1_75; void*x_8_1_76; in void*x_8_1_77; void*x_8_1_78; void*x_8_1_79; void*x_8_1_80; void*x_8_1_81; void*x_8_1_82; void*x_8_1_83; void*x_8_1_84; void*x_8_1_85; void*x_8_1_86; void*x_8_1_87; void*x_8_1_88; void*x_8_1_89; void*x_8_1_90; void*x_8_1_91; void*x_8_1_92; void*x_8_1_93; void*x_8_1_94; void*x_8_1_95; void*x_8_1_96; void*x_8_1_97; void*x_8_1_98; void*x_8_1_99; out void*x_8_1_100; out void*x_8_1_101; long x_8_1_102; void*x_8_1_103; void*x_8_1_104; void*x_8_1_105; void*x_8_1_106; void*x_8_1_107; void*x_8_1_108; void*x_8_1_109; void*x_8_1_110; void*x_8_1_111; void*x_8_1_112; void*x_8_1_113; void*x_8_1_114; void*x_8_1_115; void*x_8_1_116; void*x_8_1_117; void*x_8_1_118; void*x_8_1_119; void*x_8_1_120; void*x_8_1_121; void*x_8_1_122; void*x_8_1_123; } x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; oneway void*x18; long x19; void*x20; void*x21; void*x22; char *x23; void*x24; char *x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; union x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; int x53; void*x54; in void*x55; void*x56; void*x57; void*x58; void*x59; unsigned int x60/* : ? */; void*x61; void*x62; void*x63; unsigned short x64; void*x65; void*x66; void*x67; void*x68; void*x69; BOOL x70; void*x71; void*x72; void*x73; void*x74; void*x75; long x76; void*x77; long x78; void*x79; out void*x80; BOOL x81; void*x82; void*x83; void*x84; void*x85; void*x86; out void*x87; const void*x88; void*x89; void*x90; struct x91; void*x92; void*x93; void*x94; boolx95; void*x96; bycopy void*x97; bycopy void*x98; unsigned long x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void* x117[ /* ? */ ]; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; int x137; void*x138; in void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; int x162; void*x163; in void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; int x187; void*x188; in void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; short x212; void*x213; void*x214; void*x215; const void*x216; void*x217; void*x218; BOOL x219; void*x220; void*x221; void*x222; void*x223; void*x224; unsigned int x225/* : ? */; void*x226; void*x227; void*x228; unsigned short x229; void*x230; void*x231; void*x232; void*x233; void*x234; BOOL x235; void*x236; void*x237; void*x238; void*x239; void*x240; in void*x241; void*x242; void*x243; const void*x244; void*x245; void*x246; void*x247; void*x248; struct x249; void*x250; void*x251; void*x252; BOOL x253; void*x254; void*x255; void*x256; void*x257; void*x258; const void*x259; void*x260; void*x261; char *x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; int x282; void*x283; in void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; unsigned int x307/* : ? */; void*x308; out void*x309; out void*x310; long x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; }* _world; /* unknown property attribute:  std::__1::allocator<b2PKField *> >=^^{b2PKField}}}}B^{b2DestructionListener}^{b2Draw}fBBBBf} */
@property(retain) NSMutableArray * _bodies;
@property bool _doSleep;
@property struct b2Vec2 { float x1; float x2; } _gravity;
@property <PKPhysicsContactDelegate> * contactDelegate;
@property struct CGVector { float x1; float x2; } gravity;
@property float speed;
@property float velocityThreshold;

+ (id)world;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_bodies;
- (bool)_doSleep;
- (struct b2Vec2 { float x1; float x2; })_gravity;
- (void)_runBlockOutsideOfTimeStep:(id)arg1;
- (struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_3_1; struct b2TreeNode {} *x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; unsigned int x_1_3_6; int x_1_3_7; } x_1_2_1; int x_1_2_2; int *x_1_2_3; int x_1_2_4; int x_1_2_5; struct b2Pair {} *x_1_2_6; int x_1_2_7; int x_1_2_8; int x_1_2_9; } x_3_1_1; struct b2Contact {} *x_3_1_2; int x_3_1_3; struct b2ContactFilter {} *x_3_1_4; struct b2ContactListener {} *x_3_1_5; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct b2PKAether { struct b2Vec2 { float x_1_2_1; float x_1_2_2; } x_8_1_1; struct vector<b2PKField *, std::__1::allocator<b2PKField *> > { struct b2PKField {} **x_2_2_1; struct b2PKField {} **x_2_2_2; struct __compressed_pair<b2PKField **, std::__1::allocator<b2PKField *> > { struct b2PKField {} **x_3_3_1; } x_2_2_3; } x_8_1_2; } x8; boolx9; struct b2DestructionListener {} *x10; struct b2Draw {} *x11; float x12; boolx13; boolx14; boolx15; boolx16; float x17; }*)_world;
- (void)addBody:(id)arg1;
- (void)addField:(id)arg1;
- (void)addJoint:(id)arg1;
- (id)bodies;
- (id)bodyAlongRayStart:(struct CGPoint { float x1; float x2; })arg1 end:(struct CGPoint { float x1; float x2; })arg2;
- (id)bodyAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)bodyInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)collisionDelegate;
- (id)contactDelegate;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (void)debugDraw:(float)arg1 matrix:(union _GLKMatrix4 { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; float x_1_1_5; float x_1_1_6; float x_1_1_7; float x_1_1_8; float x_1_1_9; float x_1_1_10; float x_1_1_11; float x_1_1_12; float x_1_1_13; float x_1_1_14; float x_1_1_15; float x_1_1_16; } x1; float x2[16]; })arg2;
- (const struct PKDebugDrawPacket { struct vector<PKPoint, std::__1::allocator<PKPoint> > { struct { /* ? */ } *x_1_1_1; struct { /* ? */ } *x_1_1_2; struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { struct { /* ? */ } *x_3_2_1; } x_1_1_3; } x1; struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> > { struct { /* ? */ } *x_2_1_1; struct { /* ? */ } *x_2_1_2; struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> > { struct { /* ? */ } *x_3_2_1; } x_2_1_3; } x2; }*)debugDrawPacket;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateBodiesAlongRayStart:(struct CGPoint { float x1; float x2; })arg1 end:(struct CGPoint { float x1; float x2; })arg2 usingBlock:(id)arg3;
- (void)enumerateBodiesAtPoint:(struct CGPoint { float x1; float x2; })arg1 usingBlock:(id)arg2;
- (void)enumerateBodiesInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 usingBlock:(id)arg2;
- (struct CGVector { float x1; float x2; })evalAccel:(struct CGPoint { float x1; float x2; })arg1;
- (id)fields;
- (struct CGVector { float x1; float x2; })gravity;
- (BOOL)hasBodies;
- (BOOL)hasFields;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)removeAllBodies;
- (void)removeAllFields;
- (void)removeAllJoints;
- (void)removeBody:(id)arg1;
- (void)removeField:(id)arg1;
- (void)removeJoint:(id)arg1;
- (id)sampleFields:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 dataSize:(struct CGSize { float x1; float x2; })arg2;
- (void)setCollisionDelegate:(id)arg1;
- (void)setContactDelegate:(id)arg1;
- (void)setGravity:(struct CGVector { float x1; float x2; })arg1;
- (void)setSpeed:(float)arg1;
- (void)setVelocityThreshold:(float)arg1;
- (void)set_bodies:(id)arg1;
- (void)set_doSleep:(bool)arg1;
- (void)set_gravity:(struct b2Vec2 { float x1; float x2; })arg1;
- (float)speed;
- (BOOL)stepWithTime:(double)arg1 velocityIterations:(unsigned int)arg2 positionIterations:(unsigned int)arg3;
- (float)velocityThreshold;

@end
