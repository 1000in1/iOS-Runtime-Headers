/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/RTCReporting.framework/RTCReporting
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSArray, NSDictionary, NSMutableDictionary, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>;

@interface RTCReporting : NSObject {
    struct timeval { 
        int tv_sec; 
        int tv_usec; 
    NSMutableDictionary *_backendDict;
    id _complHandler;
    NSArray *_frameworkList;
    int _frequency;
    int _interval;
    id _logMsgHandler;
    NSMutableDictionary *_periodicServiceDict;
    NSObject<OS_dispatch_queue> *_reportingQueue;
    NSDictionary *_sessionInfoDict;
    } _startTimestamp;
    NSObject<OS_dispatch_source> *_timer;
    unsigned char _udid[41];
    NSDictionary *_userInfoDict;
}

@property(copy) id logMsgHandler;

+ (BOOL)sendMsgToServer:(id)arg1 sessionInfo:(id)arg2 userInfo:(id)arg3 eventMethod:(unsigned short)arg4 eventStatus:(unsigned short)arg5 eventPayload:(id)arg6;
+ (BOOL)sendMsgToServer:(int)arg1 serverStoreBagName:(id)arg2 defaultSvrIP:(id)arg3 defaultSvrPort:(unsigned short)arg4 componentType:(int)arg5 version:(unsigned short)arg6 sessionID:(unsigned int)arg7 eventID:(unsigned short)arg8 method:(unsigned short)arg9 respCode:(unsigned short)arg10 dict:(id)arg11;

- (void)MyPeriodicTask:(unsigned short)arg1 status:(unsigned short)arg2;
- (void)addFrameworkStatusToReportingDictionary:(id)arg1;
- (bool)areBackendStatesAvailable:(unsigned int*)arg1;
- (void)dealloc;
- (void)flushMessages;
- (int)getUploadflag;
- (id)initWithSessionInfo:(id)arg1 userInfo:(id)arg2 frameworksToCheck:(id)arg3;
- (id)initWithSessionInfo:(int)arg1 version:(unsigned short)arg2 sessionID:(unsigned int)arg3 frameworksToCheck:(id)arg4;
- (id)initWithSessionInfo:(int)arg1 version:(unsigned short)arg2 sessionID:(unsigned int)arg3;
- (void)internSendMsgOfType:(int)arg1 timestamp:(const struct timeval { int x1; int x2; }*)arg2 method:(unsigned short)arg3 respCode:(unsigned short)arg4 dict:(id)arg5;
- (id)logMsgHandler;
- (BOOL)registerPeriodicTask:(id)arg1 needToUpDate:(bool)arg2 needToReport:(bool)arg3 service_block:(id)arg4;
- (void)sendClientURLInfo:(id)arg1;
- (void)sendMsgWithMethod:(unsigned short)arg1 respCode:(unsigned short)arg2 dict:(id)arg3;
- (void)setLogMsgHandler:(id)arg1;
- (BOOL)setReportToServer:(id)arg1 completionHandler:(id)arg2;
- (BOOL)setReportToServer:(int)arg1 serverStoreBagName:(id)arg2 defaultSvrIP:(id)arg3 defaultSvrPort:(unsigned short)arg4 msgBlock:(id)arg5;
- (void)setUserInfoDict:(id)arg1;
- (BOOL)startLogTimerWithInterval:(int)arg1 reportingFrequency:(int)arg2 reportingMethod:(unsigned short)arg3 reportingStatus:(unsigned short)arg4;
- (BOOL)stopLogTimerForSession;
- (BOOL)unregisterPeriodTask:(id)arg1 unservice_block:(id)arg2;
- (BOOL)uploadFileWithName:(id)arg1;

@end
