/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon
 */

@class HAPAccessory, HMDAccessory, HMDAccessoryManager, HMDHome, HMDRoom, HMMessageDispatcher, NSArray, NSData, NSMutableArray, NSMutableSet, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSString, NSUUID;

@interface HMDAccessory : NSObject <HAPAccessoryDelegate, HMMessageReceiver, NSSecureCoding> {
    HMDAccessoryManager *_accessoryManager;
    BOOL _blocked;
    HMDAccessory *_bridge;
    NSString *_configurationAppIdentifier;
    NSMutableArray *_discoveredServices;
    HAPAccessory *_hapAccessory;
    HMDHome *_home;
    NSString *_identifier;
    NSMutableSet *_identifiersForBridgedAccessories;
    int _linkType;
    HMMessageDispatcher *_msgDispatcher;
    NSString *_name;
    BOOL _paired;
    NSObject<OS_dispatch_source> *_pairingRetryTimer;
    NSString *_pairingUsername;
    BOOL _primary;
    NSString *_providedName;
    NSData *_publicKey;
    BOOL _reachable;
    BOOL _remoteAccessEnabled;
    HMDRoom *_room;
    BOOL _unblockPending;
    NSString *_uniqueIdentifier;
    NSUUID *_uuid;
    NSObject<OS_dispatch_queue> *_workQueue;
}

@property HMDAccessoryManager * accessoryManager;
@property(getter=isBlocked) BOOL blocked;
@property HMDAccessory * bridge;
@property(retain) NSString * configurationAppIdentifier;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property(retain) NSMutableArray * discoveredServices;
@property(retain) HAPAccessory * hapAccessory;
@property(readonly) unsigned int hash;
@property HMDHome * home;
@property(retain) NSString * identifier;
@property(retain) NSMutableSet * identifiersForBridgedAccessories;
@property(readonly) int linkType;
@property(readonly) NSObject<OS_dispatch_queue> * messageReceiveQueue;
@property(readonly) NSUUID * messageTargetUUID;
@property(retain) HMMessageDispatcher * msgDispatcher;
@property(getter=getName,copy) NSString * name;
@property(getter=isPaired) BOOL paired;
@property(retain) NSObject<OS_dispatch_source> * pairingRetryTimer;
@property(retain) NSString * pairingUsername;
@property(getter=isPrimary) BOOL primary;
@property(retain) NSString * providedName;
@property(retain) NSData * publicKey;
@property(getter=isReachable) BOOL reachable;
@property(getter=isRemoteAccessEnabled) BOOL remoteAccessEnabled;
@property(retain) HMDRoom * room;
@property(readonly) NSString * serverIdentifier;
@property(copy,readonly) NSArray * services;
@property(readonly) Class superclass;
@property(readonly) BOOL supportsGroupedRequests;
@property BOOL unblockPending;
@property(retain) NSString * uniqueIdentifier;
@property(readonly) NSUUID * uuid;
@property(retain) NSObject<OS_dispatch_queue> * workQueue;

+ (id)serviceFilterSet;
+ (BOOL)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_enableNotificationForCharacteristic:(id)arg1 message:(id)arg2;
- (void)_handleCharacteristicEnableNotification:(id)arg1;
- (void)_handleCharacteristicRead:(id)arg1;
- (void)_handleCharacteristicWrite:(id)arg1;
- (void)_handleIdentify:(id)arg1;
- (void)_handlePrepareCharacteristicRead:(id)arg1;
- (void)_handlePrepareCharacteristicWrite:(id)arg1;
- (void)_handleRename:(id)arg1;
- (void)_handleRenameService:(id)arg1;
- (void)_handleUpdateAssociatedServiceType:(id)arg1;
- (void)_handleUpdateAuthorizationData:(id)arg1;
- (void)_handleUpdateRoom:(id)arg1;
- (BOOL)_isPaired;
- (BOOL)_isReachable;
- (void)_notifyCharacteristicNotificationChanges:(id)arg1 message:(id)arg2;
- (void)_notifyConnectivityChangedWithReachabilityState:(BOOL)arg1 remoteAccessChanged:(BOOL)arg2;
- (id)_populateServices:(id*)arg1;
- (void)_readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (void)_readValueForCharacteristic:(id)arg1 messageIdentifier:(id)arg2 responseHandler:(id)arg3;
- (void)_registerForMessages;
- (void)_remoteAccessEnabled:(BOOL)arg1;
- (void)_resetCharacteristicNotifications;
- (void)_sendBlockedNotification:(BOOL)arg1 withError:(id)arg2 withIdentifier:(id)arg3 withCompletion:(id)arg4;
- (void)_setHAPAccessory:(id)arg1;
- (void)_setPaired:(BOOL)arg1;
- (void)_setReachable:(BOOL)arg1;
- (void)_writeCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (void)_writeValue:(id)arg1 forCharacteristic:(id)arg2 authorizationData:(id)arg3 identifier:(id)arg4 queue:(id)arg5 completionHandler:(id)arg6;
- (void)accessoryDidBecomeReachable:(id)arg1;
- (void)accessoryDidBecomeUnreachable:(id)arg1;
- (id)accessoryManager;
- (void)addBridgedAccessory:(id)arg1;
- (void)blockWithError:(id)arg1;
- (id)bridge;
- (id)configurationAppIdentifier;
- (void)configure:(id)arg1 msgDispatcher:(id)arg2 accessoryManager:(id)arg3;
- (void)configureWithAccessory:(id)arg1 forRemoval:(BOOL)arg2;
- (void)configureWithAccessory:(id)arg1 forRemoval:(BOOL)arg2 queue:(id)arg3 completion:(id)arg4;
- (void)dealloc;
- (id)description;
- (id)descriptionNonBlocking;
- (void)didEncounterError:(id)arg1;
- (id)discoveredServices;
- (void)encodeWithCoder:(id)arg1;
- (id)findCharacteristic:(id)arg1 forService:(id)arg2;
- (id)findCharacteristicType:(id)arg1 forServiceType:(id)arg2;
- (id)findService:(id)arg1;
- (id)getConfiguredName;
- (id)getName;
- (id)hapAccessory;
- (id)hapCharacteristicWriteTuples:(id)arg1 hmdResponseTuples:(id*)arg2 mapping:(id*)arg3;
- (unsigned int)hash;
- (id)hmdCharacteristicFromHapCharacteristic:(id)arg1;
- (id)hmdCharacteristicResponses:(id)arg1 mapping:(id)arg2 overallError:(id)arg3;
- (id)home;
- (id)identifier;
- (id)identifiersForBridgedAccessories;
- (id)initWithAccessory:(id)arg1 messageDispatcher:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (BOOL)isBlocked;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isPaired;
- (BOOL)isPrimary;
- (BOOL)isReachable;
- (BOOL)isRemoteAccessEnabled;
- (int)linkType;
- (id)messageReceiveQueue;
- (id)messageTargetUUID;
- (id)msgDispatcher;
- (void)notifyValue:(id)arg1 error:(id)arg2 identifier:(id)arg3 forCharacteristic:(id)arg4 completionHandler:(id)arg5;
- (id)pairingRetryTimer;
- (id)pairingUsername;
- (id)providedName;
- (id)publicKey;
- (void)readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (void)registerForIdentifyWithMessageDispatcher:(id)arg1;
- (void)registerForMessagesWithNewUUID:(id)arg1;
- (void)remoteAccessEnabled:(BOOL)arg1;
- (void)removeBridgedAccessory:(id)arg1;
- (id)room;
- (void)savePublicKeyToKeychain;
- (id)serverIdentifier;
- (id)services;
- (void)setAccessoryManager:(id)arg1;
- (void)setBlocked:(BOOL)arg1;
- (void)setBridge:(id)arg1;
- (void)setConfigurationAppIdentifier:(id)arg1;
- (void)setDiscoveredServices:(id)arg1;
- (void)setHapAccessory:(id)arg1;
- (void)setHome:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setIdentifiersForBridgedAccessories:(id)arg1;
- (void)setMsgDispatcher:(id)arg1;
- (void)setName:(id)arg1;
- (void)setPaired:(BOOL)arg1;
- (void)setPairingRetryTimer:(id)arg1;
- (void)setPairingUsername:(id)arg1;
- (void)setPairingUsername:(id)arg1 publicKey:(id)arg2;
- (void)setPrimary:(BOOL)arg1;
- (void)setProvidedName:(id)arg1;
- (void)setPublicKey:(id)arg1;
- (void)setReachable:(BOOL)arg1;
- (void)setRemoteAccessEnabled:(BOOL)arg1;
- (void)setRoom:(id)arg1;
- (void)setUnblockPending:(BOOL)arg1;
- (void)setUniqueIdentifier:(id)arg1;
- (void)setWorkQueue:(id)arg1;
- (BOOL)supportsGroupedRequests;
- (BOOL)unblockPending;
- (void)unblockWithIdentifier:(id)arg1 withCompletion:(id)arg2;
- (id)uniqueIdentifier;
- (void)updateReachability:(BOOL)arg1;
- (void)updateRoom:(id)arg1;
- (id)uuid;
- (id)workQueue;
- (void)writeCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;

@end
