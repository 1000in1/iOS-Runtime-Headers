/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class <TSDRepTrackerDelegate>, CALayer, TSDHUDViewController, TSDLayout, TSDRep, TSUPointerKeyDictionary;

@interface TSDResizeKnobTracker : TSDKnobTracker <TSDDecorator, TSDRepTracker> {
    struct CGSize { 
        float width; 
        float height; 
    struct CGSize { 
        float width; 
        float height; 
    struct CGPoint { 
        float x; 
        float y; 
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mBaseBounds;
    BOOL mBeganAlignmentOperation;
    BOOL mCanMoveKnobAcrossOpposite;
    <TSDRepTrackerDelegate> *mDelegate;
    CALayer *mGuideLayer;
    } mLastNewBounds;
    } mMaximumSize;
    } mMinimumSize;
    BOOL mNeedsHUD;
    } mOriginalTransformInRoot;
    TSDRep *mRepToMatch;
    TSDLayout *mResizingLayout;
    TSUPointerKeyDictionary *mResizingLayoutsByRep;
    TSDHUDViewController *mSecondHUDController;
    } mSecondaryHUDPoint;
    BOOL mShouldResizeFromCenter;
    BOOL mSnapEnabled;
    BOOL mSnappedToAspectRatio;
}

@property BOOL canMoveKnobAcrossOpposite;
@property BOOL isInspectorDrivenTracking;
@property struct CGSize { float x1; float x2; } maximumSize;
@property struct CGSize { float x1; float x2; } minimumSize;
@property(retain) TSDRep * repToMatch;
@property struct CGPoint { float x1; float x2; } secondaryHUDPoint;
@property BOOL shouldResizeFromCenter;
@property BOOL snapEnabled;

- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (BOOL)allowHUDToDisplay;
- (void)animationDidStop:(id)arg1 finished:(BOOL)arg2;
- (void)applyNewBoundsToPrimaryRep;
- (void)applyNewBoundsToRep:(id)arg1;
- (void)beginMovingKnob;
- (BOOL)canCenterResize;
- (BOOL)canMoveKnobAcrossOpposite;
- (void)changeDynamicLayoutsForReps:(id)arg1;
- (void)constrainAndSnapByMovingKnobTo:(struct CGPoint { float x1; float x2; })arg1 snappingToGuides:(BOOL)arg2;
- (void)constrainBetweenMaxAndMinSize;
- (struct CGPoint { float x1; float x2; })convertKnobPositionToUnscaledCanvas:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })currentBoundsForStandardKnobs;
- (id)currentGeometryForLayout:(id)arg1;
- (struct CGSize { float x1; float x2; })currentSizeForLayout:(id)arg1;
- (void)dealloc;
- (id)decoratorOverlayLayers;
- (void)endMovingKnob;
- (BOOL)hasHorizontalFlip;
- (BOOL)hasVerticalFlip;
- (id)hudLabelText;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })i_baseBounds;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })i_lastNewBounds;
- (id)initWithRep:(id)arg1 knob:(id)arg2;
- (BOOL)isMinimumSizeFixed;
- (struct CGSize { float x1; float x2; })maximumSize;
- (struct CGSize { float x1; float x2; })minimumSize;
- (void)moveKnobToCanvasPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)moveKnobToRepPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)p_cancelDelayedHUDAndGuides;
- (void)p_hideGuideLayer;
- (void)p_hideHUD;
- (BOOL)p_isMatchingSize;
- (BOOL)p_isPreservingAspectRatio;
- (BOOL)p_isResizingFromCenter;
- (void)p_makeSiblingRepsPerformBlock:(id)arg1;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })p_repTransformInRootForTransforming;
- (BOOL)p_shouldApplyResizeToSiblingsOfRep;
- (void)p_showHUDAndGuides;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_simpleResizedRectByMovingKnobTo:(struct CGPoint { float x1; float x2; })arg1;
- (void)p_updateGuideLayer;
- (void)p_updateHUD;
- (void)p_validateLayout;
- (id)repToMatch;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })resizeTransform;
- (id)resizingLayoutForRep:(id)arg1;
- (struct CGPoint { float x1; float x2; })secondaryHUDPoint;
- (void)setCanMoveKnobAcrossOpposite:(BOOL)arg1;
- (void)setMaximumSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setMinimumSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setRepToMatch:(id)arg1;
- (void)setSecondaryHUDPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setShouldResizeFromCenter:(BOOL)arg1;
- (void)setSnapEnabled:(BOOL)arg1;
- (BOOL)shouldHideOtherKnobs;
- (BOOL)shouldHideSelectionHighlight;
- (BOOL)shouldResizeFromCenter;
- (BOOL)snapEnabled;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformForLayout:(id)arg1;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformInRootForStandardKnobs;

@end
