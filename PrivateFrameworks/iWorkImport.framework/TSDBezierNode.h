/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSDBezierNode : NSObject {
    struct CGPoint { 
        double x; 
        double y; 
    }  mIn;
    struct CGPoint { 
        double x; 
        double y; 
    }  mNode;
    struct CGPoint { 
        double x; 
        double y; 
    }  mOut;
    int  mReflectedState;
    BOOL  mSelected;
    int  mType;
}

@property (nonatomic) struct CGPoint { double x1; double x2; } inControlPoint;
@property (nonatomic, readonly) BOOL isCollapsed;
@property (nonatomic) struct CGPoint { double x1; double x2; } nodePoint;
@property (nonatomic) struct CGPoint { double x1; double x2; } outControlPoint;
@property (nonatomic) int reflectedState;
@property (getter=isSelected, nonatomic) BOOL selected;
@property (nonatomic) int type;

+ (id)bezierNodeWithPoint:(struct CGPoint { double x1; double x2; })arg1;
+ (id)bezierNodeWithPoint:(struct CGPoint { double x1; double x2; })arg1 inControlPoint:(struct CGPoint { double x1; double x2; })arg2 outControlPoint:(struct CGPoint { double x1; double x2; })arg3;

- (void)balanceControlPoints;
- (void)collapse;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (struct CGPoint { double x1; double x2; })inControlPoint;
- (BOOL)isCollapsed;
- (BOOL)isSelected;
- (void)moveToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })nodePoint;
- (struct CGPoint { double x1; double x2; })outControlPoint;
- (int)reflectedState;
- (id)reflectedStateString;
- (void)setInControlPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setInControlPoint:(struct CGPoint { double x1; double x2; })arg1 reflect:(int)arg2 constrain:(BOOL)arg3;
- (void)setInControlPointFromReflection:(struct CGPoint { double x1; double x2; })arg1 constrain:(BOOL)arg2;
- (void)setNode:(struct CGPoint { double x1; double x2; })arg1;
- (void)setNodePoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setOutControlPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setOutControlPoint:(struct CGPoint { double x1; double x2; })arg1 reflect:(int)arg2 constrain:(BOOL)arg3;
- (void)setReflectedState:(int)arg1;
- (void)setSelected:(BOOL)arg1;
- (void)setType:(int)arg1;
- (void)swapControlPoints;
- (void)transformUsingAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (int)type;
- (id)typeString;
- (BOOL)underPoint:(struct CGPoint { double x1; double x2; })arg1 withTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 andTolerance:(float)arg3 returningType:(int*)arg4;
- (void)updateReflectedState;

@end
