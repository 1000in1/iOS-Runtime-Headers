/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class <TPHeaderFooterProvider>, <TPMasterDrawableProvider>, NSArray, TPFootnoteContainerLayout, TPInflatableFootnoteContainerLayout, TPMarginAdjustLayout, TSURetainedPointerKeyDictionary, TSWPLayout, TSWPPadding;

@interface TPPaginatedPageLayout : TPPageLayout <TSWPLayoutParent, TSWPColumnMetrics, TPAttachmentLayoutParent> {
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    BOOL _childLayoutsValid;
    unsigned int _contentFlags;
    TPInflatableFootnoteContainerLayout *_footnoteContainerLayout;
    } _headerFooterBorderRects[2][3];
    } _headerFooterClipRects[2][3];
    TSWPLayout *_headerFooterLayouts[2][3];
    <TPHeaderFooterProvider> *_headerFooterProvider;
    TPMarginAdjustLayout *_marginAdjustLayout;
    <TPMasterDrawableProvider> *_masterDrawableProvider;
    TSURetainedPointerKeyDictionary *_oldChildLayouts;
    unsigned int _pageCount;
    unsigned int _pageNumber;
}

@property(readonly) struct CGSize { float x1; float x2; } adjustedInsets;
@property(readonly) BOOL alwaysStartsNewTarget;
@property(readonly) NSArray * anchoredDrawableLayouts;
@property(readonly) unsigned int columnCount;
@property(readonly) BOOL columnsAreLeftToRight;
@property(readonly) NSArray * floatingDrawableLayouts;
@property(readonly) float footerHeight;
@property(readonly) TPFootnoteContainerLayout * footnoteContainerLayout;
@property(readonly) <TPHeaderFooterProvider> * headerFooterProvider;
@property(readonly) float headerHeight;
@property(readonly) TSWPPadding * layoutMargins;
@property(readonly) TPMarginAdjustLayout * marginAdjustLayout;
@property(readonly) <TPMasterDrawableProvider> * masterDrawableProvider;
@property(readonly) unsigned int pageCount;
@property(readonly) unsigned int pageNumber;
@property(readonly) BOOL shrinkTextToFit;
@property(readonly) float textScaleFactor;

- (id).cxx_construct;
- (void)addAttachmentLayout:(id)arg1;
- (id)additionalDependenciesForChildLayout:(id)arg1;
- (struct CGSize { float x1; float x2; })adjustedInsets;
- (BOOL)allowsBody;
- (BOOL)allowsFootnotes;
- (BOOL)allowsHeaderFooter;
- (BOOL)alwaysStartsNewTarget;
- (id)anchoredDrawableLayouts;
- (unsigned int)autosizeFlagsForTextLayout:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })autosizedFrameForTextLayout:(id)arg1 textSize:(struct CGSize { float x1; float x2; })arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bodyRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })borderRectForHeaderFooter:(int)arg1 atIndex:(int)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })clipRectForHeaderFooter:(int)arg1 atIndex:(int)arg2;
- (unsigned int)columnCount;
- (BOOL)columnsAreLeftToRight;
- (void)dealloc;
- (id)dependentLayouts;
- (id)dependentsOfTextLayout:(id)arg1;
- (void)evacuateOldChildLayoutCache;
- (id)existingAttachmentLayoutForInfo:(id)arg1;
- (id)floatingDrawableLayouts;
- (float)footerHeight;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })footnoteContainerFrameWithSize:(struct CGSize { float x1; float x2; })arg1;
- (id)footnoteContainerLayout;
- (float)gapForColumnIndex:(unsigned int)arg1 bodyWidth:(float)arg2;
- (id)headerFooterLayout:(int)arg1 atIndex:(int)arg2;
- (id)headerFooterProvider;
- (float)headerHeight;
- (float)heightAvailableForFootnotes;
- (void)inflateFootnotesInFootnoteContainer:(id)arg1;
- (void)invalidateBodyAndMarginLayouts;
- (void)invalidateFootnoteContainers;
- (void)invalidateFootnoteSeparatorLine;
- (void)invalidateForAutosizingTextLayout:(id)arg1;
- (void)invalidateForDraggingDrawables;
- (void)invalidateHeaderFooterLayouts;
- (void)invalidateHeaderFooterLayoutsCache;
- (void)invalidateLayoutsForPageCountChange;
- (BOOL)isHeaderFooterLayout:(id)arg1;
- (BOOL)isReadyForBodyLayout;
- (id)layoutMargins;
- (id)layoutsCausingWrapOnTextLayoutTarget:(id)arg1 ignoreIntersection:(BOOL)arg2;
- (id)marginAdjustLayout;
- (id)masterDrawableProvider;
- (float)maxAutoGrowHeightForTextLayout:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })nonAutosizedFrameForTextLayout:(id)arg1;
- (id)p_existingChildLayoutForInfo:(id)arg1;
- (void)p_insertBodyAndValidatedFloatingLayouts;
- (id)p_insertChildLayoutForInfo:(id)arg1;
- (void)p_insertFootnoteContainerLayout;
- (id)p_insertValidatedChildLayoutForInfo:(id)arg1;
- (void)p_insertValidatedFloatingLayouts;
- (void)p_insertValidatedHeaderFooterLayouts;
- (void)p_insertValidatedMarginAdjustLayout;
- (void)p_insertValidatedMasterLayouts;
- (void)p_invalidatePageControllerForDynamicOperation;
- (BOOL)p_isHeaderFooter:(int)arg1 editingAtFragmentIndex:(int)arg2;
- (id)p_orderedChildInfos;
- (BOOL)p_updateCachedHeaderFooterLayouts;
- (void)p_updateFromLayoutInfoProvider;
- (void)p_updateHeaderFooterClipAndBorderRect;
- (void)p_updateHeaderFooterClipAndBorderRects:(int)arg1;
- (unsigned int)pageCount;
- (unsigned int)pageCountForAttachment:(id)arg1;
- (unsigned int)pageNumber;
- (unsigned int)pageNumberForAttachment:(id)arg1;
- (float)positionForColumnIndex:(unsigned int)arg1 bodyWidth:(float)arg2 outWidth:(float*)arg3 outGap:(float*)arg4;
- (void)processWidowAndInflation;
- (void)rebuildChildLayoutsOnNextValidation;
- (Class)repClassForTextLayout:(id)arg1;
- (void)resetFootnoteLayoutsForReinflation;
- (BOOL)shouldHeaderFooterBeVisible:(int)arg1;
- (BOOL)shouldHeaderFooterBeVisibleForPageIndex:(unsigned int)arg1;
- (BOOL)shrinkTextToFit;
- (BOOL)textIsVertical;
- (void)validate;
- (int)verticalAlignmentForTextLayout:(id)arg1;
- (float)widthForColumnIndex:(unsigned int)arg1 bodyWidth:(float)arg2;
- (void)wrappableChildInvalidated:(id)arg1;

@end
