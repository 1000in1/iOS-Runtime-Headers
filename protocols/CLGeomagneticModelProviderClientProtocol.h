/* Generated by RuntimeBrowser.
 */

@protocol CLGeomagneticModelProviderClientProtocol <CLNotifierServiceProtocol>

@required

- (void)doAsync:(void *)arg1; // needs 1 arg types, found 5: id /* block */, /* Warning: Unrecognized filer type: '<' using 'void*' */ void*, void, id /* block */, struct CLGeomagneticModelProviderClient { int (**x1)(); struct BasicMutex { int (**x_2_1_1)(); struct MutexInfo {} *x_2_1_2; } x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; id x4; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_6_1_1; } x6; int x7; bool x8; struct CLConnectionClient {} *x9; id x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; unsigned int x26/* : ? */; void*x27; short x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; SEL x35; SEL x36; inout out void*x37; int x38; float x39; int x40; BOOL x41; void*x42; void*x43; int x44; out in void*x45; void*x46; unsigned char x47; unsigned long x48; unsigned char x49; out void*x50; void*x51; void*x52; short x53; short x54; long doublex55; void*x56; void*x57; void*x58; unsigned int x59/* : ? */; void*x60; short x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; SEL x68; SEL x69; inout out void*x70; int x71; float x72; int x73; BOOL x74; void*x75; void*x76; int x77; out in long doublex78; void*x79; void*x80; void*x81; void*x82; in void*x83; int x84; void*x85; out void*x86; in void*x87; void*x88; void*x89; struct x90; void*x91; void*x92; void*x93; short x94; void*x95; void*x96; void*x97; const void*x98; void*x99; void*x100; BOOL x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; long x111; void*x112; out void*x113; in void*x114; void*x115; void*x116; void*x117; void*x118; struct x119; void*x120; void*x121; void*x122; void*x123; void*x124; in void*x125; short x126; void*x127; int x128; void*x129; void*x130; void*x131; in void*x132; void*x133; void*x134; double x135; void*x136; void*x137; void*x138; int x139; void*x140; in void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; in void*x166; short x167; void*x168; int x169; void*x170; void*x171; void*x172; in void*x173; void*x174; void*x175; double x176; void*x177; void*x178; void*x179; int x180; void*x181; in void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; BOOL x205; void*x206; void*x207; void*x208; void*x209; void*x210; const void*x211; void*x212; void*x213; char *x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; }*
- (void)doAsync:(void *)arg1 withReply:(void *)arg2; // needs 2 arg types, found 5: id /* block */, /* Warning: Unrecognized filer type: '<' using 'void*' */ void*, void, id /* block */, struct CLGeomagneticModelProviderClient { int (**x1)(); struct BasicMutex { int (**x_2_1_1)(); struct MutexInfo {} *x_2_1_2; } x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; id x4; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_6_1_1; } x6; int x7; bool x8; struct CLConnectionClient {} *x9; id x10; void*x11; void*x12; id /* block */ x13; void*x14; void x15; id /* block */ x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; in void*x30; double x31; void*x32; void*x33; void*x34; in void*x35; out void*x36; double x37; void*x38; void*x39; void*x40; void*x41; void*x42; short x43; void*x44; void*x45; void*x46; double x47; void*x48; SEL x49; void*x50; SEL x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; SEL x59; void*x60; SEL x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; const void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; in void*x76; out void*x77; double x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; BOOL x86; void*x87; out void*x88; void*x89; void*x90; void*x91; void*x92; const void*x93; void*x94; void*x95; short x96; void*x97; short x98; void*x99; void*x100; void*x101; double x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; int x110; void*x111; const void*x112; void*x113; void*x114; void*x115; void*x116; in void*x117; short x118; void*x119; int x120; void*x121; void*x122; void*x123; in void*x124; void*x125; void*x126; double x127; void*x128; void*x129; void*x130; long x131; void*x132; out void*x133; in void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; short x141; void*x142; void*x143; void*x144; double x145; void*x146; SEL x147; void*x148; SEL x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; SEL x157; void*x158; SEL x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void x173; void*x174; void*x175; void*x176; long x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; BOOL x185; void*x186; out void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; const void*x194; void*x195; void*x196; void*x197; void*x198; int x199; void*x200; in void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; short x208; void*x209; void*x210; void*x211; double x212; void*x213; SEL x214; void*x215; SEL x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; SEL x224; void*x225; SEL x226; void*x227; void*x228; void*x229; void*x230; void*x231; void x232; void*x233; void*x234; void*x235; long x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; int x254; void*x255; in void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; unsigned char x263; void*x264; unsigned long x265; void*x266; inout void*x267; out void*x268; void*x269; void*x270; int x271; void*x272; float x273; void*x274; int x275; void*x276; void*x277; void*x278; const void*x279; void*x280; void*x281; unsigned char x282; void*x283; unsigned long x284; void*x285; void*x286; void*x287; void*x288; void*x289; out void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; in void*x297; void*x298; void*x299; void*x300; void*x301; int x302; void*x303; BOOL x304; void*x305; void*x306; void*x307; out void*x308; double x309; void*x310; void*x311; void*x312; long x313; void*x314; void*x315; void*x316; const void*x317; out void*x318; void x319; void*x320; int x321; void*x322; double x323; void*x324; void*x325; void*x326; const void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; SEL x338; void*x339; SEL x340; void*x341; inout void*x342; out void*x343; void*x344; void*x345; int x346; void*x347; float x348; void*x349; int x350; void*x351; BOOL x352; void*x353; void*x354; void*x355; void*x356; void*x357; int x358; void*x359; out void*x360; in void*x361; void*x362; void*x363; void*x364; void*x365; unsigned char x366; void*x367; unsigned long x368; void*x369; void*x370; void*x371; void*x372; void*x373; out void*x374; void*x375; void*x376; void*x377; void*x378; void*x379; void*x380; in void*x381; void*x382; void*x383; void*x384; void*x385; int x386; void*x387; BOOL x388; void*x389; void*x390; void*x391; out void*x392; double x393; void*x394; void*x395; void*x396; long x397; void*x398; void*x399; void*x400; const void*x401; out void*x402; void x403; void*x404; int x405; void*x406; double x407; void*x408; void*x409; void*x410; const void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; SEL x422; void*x423; SEL x424; void*x425; inout void*x426; out void*x427; void*x428; void*x429; int x430; void*x431; float x432; void*x433; int x434; void*x435; BOOL x436; void*x437; void*x438; void*x439; void*x440; void*x441; int x442; void*x443; out void*x444; in void*x445; long doublex446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; void*x457; BOOL x458; void*x459; void*x460; void*x461; void*x462; void*x463; const void*x464; void*x465; void*x466; void*x467; void*x468; BOOL x469; void*x470; void*x471; void*x472; void*x473; void*x474; const void*x475; void*x476; void*x477; SEL x478; void*x479; SEL x480; void*x481; inout void*x482; out void*x483; void*x484; void*x485; int x486; void*x487; float x488; void*x489; int x490; void*x491; BOOL x492; void*x493; void*x494; void*x495; void*x496; void*x497; int x498; void*x499; out void*x500; in void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; short x508; void*x509; void*x510; void*x511; double x512; void*x513; SEL x514; void*x515; SEL x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; void*x523; SEL x524; void*x525; SEL x526; void*x527; long x528; void*x529; void*x530; void*x531; short x532; void*x533; short x534; void*x535; void*x536; void*x537; int x538; void*x539; in void*x540; void*x541; void*x542; void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; void*x549; void*x550; const void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; void*x560; void*x561; void*x562; void*x563; struct x564; void*x565; void*x566; void*x567; void*x568; void*x569; in void*x570; short x571; void*x572; int x573; void*x574; void*x575; void*x576; in void*x577; void*x578; void*x579; double x580; void*x581; void*x582; void*x583; long x584; void*x585; out void*x586; in void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; void*x596; void*x597; void*x598; void*x599; void*x600; void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; void*x609; }*
- (BOOL)syncgetDoSync:(void *)arg1; // needs 1 arg types, found 5: id /* block */, /* Warning: Unrecognized filer type: '<' using 'void*' */ void*, void, id /* block */, struct CLGeomagneticModelProviderClient { int (**x1)(); struct BasicMutex { int (**x_2_1_1)(); struct MutexInfo {} *x_2_1_2; } x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; id x4; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_6_1_1; } x6; int x7; bool x8; struct CLConnectionClient {} *x9; id x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; SEL x26; void*x27; void*x28; void*x29; const void*x30; void*x31; void*x32; in out double x33; void*x34; void*x35; unsigned int x36/* : ? */; void*x37; short x38; void*x39; void*x40; void x41; out int x42; double x43; void*x44; char *x45; void*x46; void*x47; char *x48; void*x49; void*x50; void*x51; short x52; void*x53; double x54; SEL x55; SEL x56; void*x57; void*x58; void*x59; SEL x60; SEL x61; void*x62; long x63; long x64; out BOOL x65; void*x66; void*x67; out const void*x68; short x69; void*x70; double x71; SEL x72; SEL x73; void*x74; void*x75; void*x76; SEL x77; SEL x78; void*x79; void*x80; void*x81; const int x82; void*x83; in void*x84; void*x85; void*x86; void*x87; void*x88; union x89; void*x90; char *x91; void*x92; char *x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; union x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; short x109; void*x110; void*x111; void*x112; const void*x113; void*x114; void*x115; BOOL x116; void*x117; void*x118; void*x119; void*x120; void*x121; bool x122; void*x123; void*x124; void*x125; short x126; void*x127; int x128; void*x129; BOOL x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; struct x144; void*x145; void*x146; void*x147; int x148; void*x149; in void*x150; void*x151; void*x152; void*x153; void*x154; union x155; void*x156; char *x157; void*x158; char *x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; union x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; short x185; void*x186; void*x187; void*x188; const void*x189; void*x190; void*x191; BOOL x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; unsigned int x208; void*x209; in void*x210; float x211; void*x212; out void*x213; void*x214; void*x215; struct x216; void*x217; }*

@end
