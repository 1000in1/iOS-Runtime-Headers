/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SceneKit.framework/SceneKit
 */

@interface SCNPhysicsSliderJoint : SCNPhysicsBehavior {
    struct btSliderConstraint { int (**x1)(); int x2; int x3; union { int x_4_1_1; void *x_4_1_2; } x4; double x5; bool x6; bool x7; int x8; struct btRigidBody {} *x9; struct btRigidBody {} *x10; double x11; double x12; struct btJointFeedback {} *x13; bool x14; bool x15; struct btTransform { struct btMatrix3x3 { struct btVector3 { double x_1_3_1[4]; } x_1_2_1[3]; } x_16_1_1; struct btVector3 { double x_2_2_1[4]; } x_16_1_2; } x16; struct btTransform { struct btMatrix3x3 { struct btVector3 { double x_1_3_1[4]; } x_1_2_1[3]; } x_17_1_1; struct btVector3 { double x_2_2_1[4]; } x_17_1_2; } x17; bool x18; double x19; double x20; double x21; double x22; double x23; double x24; double x25; double x26; double x27; double x28; double x29; double x30; double x31; double x32; double x33; double x34; double x35; double x36; double x37; double x38; double x39; double x40; double x41; double x42; double x43; double x44; double x45; double x46; bool x47; bool x48; int x49; struct btJacobianEntry { struct btVector3 { double x_1_2_1[4]; } x_50_1_1; struct btVector3 { double x_2_2_1[4]; } x_50_1_2; struct btVector3 { double x_3_2_1[4]; } x_50_1_3; struct btVector3 { double x_4_2_1[4]; } x_50_1_4; struct btVector3 { double x_5_2_1[4]; } x_50_1_5; double x_50_1_6; } x50[3]; } * _constraint;
    struct { 
        SCNPhysicsBody *bodyA; 
        SCNPhysicsBody *bodyB; 
        struct SCNVector3 { 
            double x; 
            double y; 
            double z; 
        } axisA; 
        struct SCNVector3 { 
            double x; 
            double y; 
            double z; 
        } anchorA; 
        struct SCNVector3 { 
            double x; 
            double y; 
            double z; 
        } axisB; 
        struct SCNVector3 { 
            double x; 
            double y; 
            double z; 
        } anchorB; 
        double minLinearLimit; 
        double maxLinearLimit; 
        double minAngularLimit; 
        double maxAngularLimit; 
        double motorTargetLinearVelocity; 
        double motorMaximumForce; 
        double motorTargetAngularVelocity; 
        double motorMaximumTorque; 
    }  _definition;
    SCNPhysicsWorld * _world;
}

@property (nonatomic) struct SCNVector3 { double x1; double x2; double x3; } anchorA;
@property (nonatomic) struct SCNVector3 { double x1; double x2; double x3; } anchorB;
@property (nonatomic) struct SCNVector3 { double x1; double x2; double x3; } axisA;
@property (nonatomic) struct SCNVector3 { double x1; double x2; double x3; } axisB;
@property (nonatomic, readonly) SCNPhysicsBody *bodyA;
@property (nonatomic, readonly) SCNPhysicsBody *bodyB;
@property (nonatomic) double maximumAngularLimit;
@property (nonatomic) double maximumLinearLimit;
@property (nonatomic) double minimumAngularLimit;
@property (nonatomic) double minimumLinearLimit;
@property (nonatomic) double motorMaximumForce;
@property (nonatomic) double motorMaximumTorque;
@property (nonatomic) double motorTargetAngularVelocity;
@property (nonatomic) double motorTargetLinearVelocity;

+ (id)jointWithBody:(id)arg1 axis:(struct SCNVector3 { double x1; double x2; double x3; })arg2 anchor:(struct SCNVector3 { double x1; double x2; double x3; })arg3;
+ (id)jointWithBodyA:(id)arg1 axisA:(struct SCNVector3 { double x1; double x2; double x3; })arg2 anchorA:(struct SCNVector3 { double x1; double x2; double x3; })arg3 bodyB:(id)arg4 axisB:(struct SCNVector3 { double x1; double x2; double x3; })arg5 anchorB:(struct SCNVector3 { double x1; double x2; double x3; })arg6;

- (void)_addToPhysicsWorld:(id)arg1;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (struct SCNVector3 { double x1; double x2; double x3; })anchorA;
- (struct SCNVector3 { double x1; double x2; double x3; })anchorB;
- (struct SCNVector3 { double x1; double x2; double x3; })axisA;
- (struct SCNVector3 { double x1; double x2; double x3; })axisB;
- (id)bodyA;
- (id)bodyB;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithBody:(id)arg1 axis:(struct SCNVector3 { double x1; double x2; double x3; })arg2 anchor:(struct SCNVector3 { double x1; double x2; double x3; })arg3;
- (id)initWithBodyA:(id)arg1 axisA:(struct SCNVector3 { double x1; double x2; double x3; })arg2 anchorA:(struct SCNVector3 { double x1; double x2; double x3; })arg3 bodyB:(id)arg4 axisB:(struct SCNVector3 { double x1; double x2; double x3; })arg5 anchorB:(struct SCNVector3 { double x1; double x2; double x3; })arg6;
- (id)initWithCoder:(id)arg1;
- (float)maximumAngularLimit;
- (float)maximumLinearLimit;
- (float)minimumAngularLimit;
- (float)minimumLinearLimit;
- (float)motorMaximumForce;
- (float)motorMaximumTorque;
- (float)motorTargetAngularVelocity;
- (float)motorTargetLinearVelocity;
- (void)setAnchorA:(struct SCNVector3 { double x1; double x2; double x3; })arg1;
- (void)setAnchorB:(struct SCNVector3 { double x1; double x2; double x3; })arg1;
- (void)setAxisA:(struct SCNVector3 { double x1; double x2; double x3; })arg1;
- (void)setAxisB:(struct SCNVector3 { double x1; double x2; double x3; })arg1;
- (void)setMaximumAngularLimit:(float)arg1;
- (void)setMaximumLinearLimit:(float)arg1;
- (void)setMinimumAngularLimit:(float)arg1;
- (void)setMinimumLinearLimit:(float)arg1;
- (void)setMotorMaximumForce:(float)arg1;
- (void)setMotorMaximumTorque:(float)arg1;
- (void)setMotorTargetAngularVelocity:(float)arg1;
- (void)setMotorTargetLinearVelocity:(float)arg1;

@end
