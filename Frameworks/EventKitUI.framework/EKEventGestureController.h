/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <EKEventGestureControllerDelegate>, <EKEventGestureControllerUntimedDelegate>, EKCalendarDate, EKDayOccurrenceView, EKEvent, NSTimer, UILongPressGestureRecognizer;

@interface EKEventGestureController : NSObject <UIGestureRecognizerDelegate, UIAlertViewDelegate> {
    struct CGPoint { 
        float x; 
        float y; 
    struct CGPoint { 
        float x; 
        float y; 
    struct CGPoint { 
        float x; 
        float y; 
    struct CGPoint { 
        float x; 
        float y; 
    BOOL _commitBlocked;
    int _consecutivePageTurnCount;
    EKCalendarDate *_currentDay;
    int _currentDragType;
    double _dateAtFirstTouchPoint;
    <EKEventGestureControllerDelegate> *_delegate;
    BOOL _dragLockDisabled;
    EKDayOccurrenceView *_draggingView;
    EKEvent *_event;
    float _firstContactOfDraggingViewTop;
    } _firstTouchPoint;
    double _firstTouchTime;
    BOOL _forcedStart;
    BOOL _hasStartedScrolling;
    BOOL _horizontalDragLocked;
    BOOL _isInCancelRegion;
    BOOL _isMultiDayTimedEvent;
    BOOL _isNewEvent;
    } _latestTouchPoint;
    BOOL _needsCommit;
    } _previousTouchPoint;
    double _previousTouchTime;
    float _previousTouchVelocity;
    UILongPressGestureRecognizer *_recognizer;
    id _recurrenceSheetCompletionHandler;
    NSTimer *_scrollTimer;
    double _timeSinceEnteredPageMargin;
    } _touchOffset;
    int _touchOffsetDays;
    <EKEventGestureControllerUntimedDelegate> *_untimedDelegate;
    BOOL _usesHorizontalDragLocking;
    BOOL _usesXDragOffsetInCancelRegion;
}

@property BOOL commitBlocked;
@property <EKEventGestureControllerDelegate> * delegate;
@property(readonly) EKDayOccurrenceView * draggingView;
@property(retain) EKEvent * event;
@property(readonly) struct CGPoint { float x1; float x2; } firstTouchPoint;
@property(readonly) struct CGPoint { float x1; float x2; } latestTouchPoint;
@property(readonly) struct CGPoint { float x1; float x2; } touchOffset;
@property <EKEventGestureControllerUntimedDelegate> * untimedDelegate;
@property BOOL usesHorizontalDragLocking;
@property BOOL usesXDragOffsetInCancelRegion;

- (void).cxx_destruct;
- (float)_alignedYOriginForAllDayOccurrence:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 floorAtAllDayRegionBottom:(BOOL)arg3;
- (void)_cancel;
- (float)_capOccurrenceViewYOrigin:(float)arg1;
- (void)_commit;
- (void)_commitUntimed;
- (float)_computeHeightForOccurrenceViewOfDuration:(double)arg1 allDay:(BOOL)arg2;
- (struct CGPoint { float x1; float x2; })_computeOriginAtTouchPoint:(struct CGPoint { float x1; float x2; })arg1 forDate:(double)arg2 isAllDay:(BOOL)arg3 allowXOffset:(BOOL)arg4 allowFloorAtRegionBottom:(BOOL)arg5;
- (float)_computeWidthForOccurrenceView;
- (void)_createTemporaryView:(id)arg1;
- (BOOL)_flingOrCancelDraggingViewIfNeeded;
- (void)_installScrollTimer;
- (BOOL)_isPointInCancelRegion:(struct CGPoint { float x1; float x2; })arg1;
- (void)_longPress:(id)arg1;
- (void)_removeScrollTimer;
- (void)_scrollTimerFired:(id)arg1;
- (void)_setTouchOffsetsFromPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_setUpAfterForcedStartFromPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_setUpAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_update;
- (void)_updateHorizontalDragLockForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(int)arg2;
- (BOOL)commitBlocked;
- (void)dealloc;
- (id)delegate;
- (id)draggingView;
- (void)endForcedStart;
- (id)event;
- (struct CGPoint { float x1; float x2; })firstTouchPoint;
- (void)forceStartWithOccurrence:(id)arg1;
- (BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)initWithView:(id)arg1;
- (void)invalidate;
- (BOOL)isDraggingOccurrence;
- (struct CGPoint { float x1; float x2; })latestTouchPoint;
- (void)promptUserForRecurrenceActionOnOccurrence:(id)arg1 whenFinished:(id)arg2;
- (void)removeDraggedOccurrence;
- (void)setCommitBlocked:(BOOL)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEvent:(id)arg1;
- (void)setUntimedDelegate:(id)arg1;
- (void)setUsesHorizontalDragLocking:(BOOL)arg1;
- (void)setUsesXDragOffsetInCancelRegion:(BOOL)arg1;
- (struct CGPoint { float x1; float x2; })touchOffset;
- (id)untimedDelegate;
- (void)updateDraggingOccurrence;
- (void)updateDraggingOccurrenceForced:(BOOL)arg1 animated:(BOOL)arg2;
- (BOOL)usesHorizontalDragLocking;
- (BOOL)usesXDragOffsetInCancelRegion;

@end
