/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreImage.framework/CoreImage
 */

@interface CIVector : NSObject <NSCopying, NSSecureCoding> {
    unsigned long  _count;
    union { 
        double vec[4]; 
        double *ptr; 
    }  _u;
}

@property (readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } CGAffineTransformValue;
@property (readonly) struct CGPoint { double x1; double x2; } CGPointValue;
@property (readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } CGRectValue;
@property (readonly) double W;
@property (readonly) double X;
@property (readonly) double Y;
@property (readonly) double Z;
@property (readonly) float*_values;
@property (readonly) unsigned long count;
@property (readonly) NSString *stringRepresentation;

+ (BOOL)supportsSecureCoding;
+ (id)vectorWithCGAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
+ (id)vectorWithCGPoint:(struct CGPoint { double x1; double x2; })arg1;
+ (id)vectorWithCGRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)vectorWithString:(id)arg1;
+ (id)vectorWithValues:(const float*)arg1 count:(unsigned long)arg2;
+ (id)vectorWithX:(float)arg1;
+ (id)vectorWithX:(float)arg1 Y:(float)arg2;
+ (id)vectorWithX:(float)arg1 Y:(float)arg2 Z:(float)arg3;
+ (id)vectorWithX:(float)arg1 Y:(float)arg2 Z:(float)arg3 W:(float)arg4;

- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })CGAffineTransformValue;
- (struct CGPoint { double x1; double x2; })CGPointValue;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })CGRectValue;
- (float)W;
- (float)X;
- (float)Y;
- (float)Z;
- (float*)_values;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long)count;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)finalize;
- (unsigned int)hash;
- (id)init;
- (id)initWithCGAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (id)initWithCGPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)initWithCGRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithString:(id)arg1;
- (id)initWithValues:(const float*)arg1 count:(unsigned long)arg2;
- (id)initWithX:(float)arg1;
- (id)initWithX:(float)arg1 Y:(float)arg2;
- (id)initWithX:(float)arg1 Y:(float)arg2 Z:(float)arg3;
- (id)initWithX:(float)arg1 Y:(float)arg2 Z:(float)arg3 W:(float)arg4;
- (BOOL)isEqual:(id)arg1;
- (id)stringRepresentation;
- (float)valueAtIndex:(unsigned long)arg1;

@end
