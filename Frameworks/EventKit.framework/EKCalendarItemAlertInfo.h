/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/EventKit.framework/EventKit
 */

@class <EKTravelAdvice>, NSDate, NSString, NSTimeZone, NSURL;

@interface EKCalendarItemAlertInfo : NSObject <NSCopying> {
    struct { 
        double latitude; 
        double longitude; 
    NSURL *_action;
    NSString *_alarmID;
    NSString *_dismissalID;
    NSDate *_endDate;
    NSURL *_entityID;
    NSDate *_eventDate;
    NSTimeZone *_eventTimeZone;
    NSString *_externalID;
    NSDate *_firstDateAlertedForTravelAdvice;
    } _geoLocationCoordinates;
    NSDate *_lastFireTimeOfAlertOffsetFromTravelTime;
    <EKTravelAdvice> *_latestTravelAdvice;
    NSString *_location;
    NSString *_organizerEmailAddress;
    long long _proximity;
    NSString *_publisherBulletinID;
    NSString *_startLocationRouting;
    NSString *_title;
    bool_acknowledged;
    bool_allDay;
    bool_hasGeoLocationCoordinates;
    bool_hasOrganizerThatIsNotCurrentUser;
    bool_isOffsetFromTravelTimeStart;
    bool_tentative;
}

@property(readonly) bool acknowledged;
@property(readonly) NSURL * action;
@property(readonly) NSString * alarmID;
@property(readonly) bool allDay;
@property(readonly) NSString * dismissalID;
@property(readonly) NSDate * endDate;
@property(readonly) NSURL * entityID;
@property(readonly) NSDate * eventDate;
@property(readonly) NSTimeZone * eventTimeZone;
@property(readonly) NSString * externalID;
@property(retain) NSDate * firstDateAlertedForTravelAdvice;
@property struct { double x1; double x2; } geoLocationCoordinates;
@property bool hasGeoLocationCoordinates;
@property bool hasOrganizerThatIsNotCurrentUser;
@property(readonly) bool isOffsetFromTravelTimeStart;
@property(retain) NSDate * lastFireTimeOfAlertOffsetFromTravelTime;
@property(retain) <EKTravelAdvice> * latestTravelAdvice;
@property(readonly) NSString * location;
@property(retain) NSString * organizerEmailAddress;
@property(readonly) long long proximity;
@property(readonly) NSString * publisherBulletinID;
@property(readonly) NSString * recordID;
@property(retain) NSString * startLocationRouting;
@property(readonly) bool tentative;
@property(readonly) NSString * title;

- (bool)acknowledged;
- (id)action;
- (id)alarmID;
- (bool)allDay;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dismissalID;
- (id)endDate;
- (id)entityID;
- (id)eventDate;
- (id)eventTimeZone;
- (id)externalID;
- (id)firstDateAlertedForTravelAdvice;
- (struct { double x1; double x2; })geoLocationCoordinates;
- (bool)hasGeoLocationCoordinates;
- (bool)hasOrganizerThatIsNotCurrentUser;
- (unsigned long long)hash;
- (id)initWithTitle:(id)arg1 location:(id)arg2 date:(id)arg3 endDate:(id)arg4 timeZone:(id)arg5 allDay:(bool)arg6 tentative:(bool)arg7 publisherBulletinID:(id)arg8 entityID:(id)arg9 action:(id)arg10 proximity:(long long)arg11 externalID:(id)arg12 acknowledged:(bool)arg13 dismissalID:(id)arg14 alarmID:(id)arg15 isOffsetFromTravelTimeStart:(bool)arg16;
- (bool)isEqual:(id)arg1;
- (bool)isOffsetFromTravelTimeStart;
- (id)lastFireTimeOfAlertOffsetFromTravelTime;
- (id)latestTravelAdvice;
- (id)location;
- (id)organizerEmailAddress;
- (long long)proximity;
- (id)publisherBulletinID;
- (id)recordID;
- (void)setFirstDateAlertedForTravelAdvice:(id)arg1;
- (void)setGeoLocationCoordinates:(struct { double x1; double x2; })arg1;
- (void)setHasGeoLocationCoordinates:(bool)arg1;
- (void)setHasOrganizerThatIsNotCurrentUser:(bool)arg1;
- (void)setLastFireTimeOfAlertOffsetFromTravelTime:(id)arg1;
- (void)setLatestTravelAdvice:(id)arg1;
- (void)setOrganizerEmailAddress:(id)arg1;
- (void)setStartLocationRouting:(id)arg1;
- (id)startLocationRouting;
- (bool)tentative;
- (id)title;

@end
