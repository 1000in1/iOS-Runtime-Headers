/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UIPickerColumnView : UIView <UIPickerTableViewContainerDelegate, UITableViewDataSource> {
    UIColor * __textColor;
    UIView * _bottomContainerView;
    UIPickerTableView * _bottomTable;
    BOOL  _isNoLongerInUse;
    double  _leftHitTestExtension;
    double  _middleBarHeight;
    UIView * _middleContainerView;
    UIPickerTableView * _middleTable;
    struct CATransform3D { 
        double m11; 
        double m12; 
        double m13; 
        double m14; 
        double m21; 
        double m22; 
        double m23; 
        double m24; 
        double m31; 
        double m32; 
        double m33; 
        double m34; 
        double m41; 
        double m42; 
        double m43; 
        double m44; 
    }  _perspectiveTransform;
    UIPickerView * _pickerView;
    double  _rightHitTestExtension;
    double  _rowHeight;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _tableFrame;
    UIView * _topContainerView;
    UIPickerTableView * _topTable;
}

@property (getter=_textColor, setter=_setTextColor:, nonatomic, retain) UIColor *_textColor;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (nonatomic) BOOL isNoLongerInUse;
@property (nonatomic) double leftHitTestExtension;
@property (nonatomic) struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; } perspectiveTransform;
@property (nonatomic) double rightHitTestExtension;
@property (nonatomic) double rowHeight;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } selectionBarRect;
@property (nonatomic, readonly) int selectionBarRow;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_allVisibleCells;
- (void)_centerTableInContainer:(id)arg1;
- (BOOL)_containsTable:(id)arg1;
- (id)_createContainerViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_createTableViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 containingFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (float)_horizontalBiasForEndTables;
- (void)_moveTableViewIfNecessary:(id)arg1 toContentOffset:(struct CGPoint { double x1; double x2; })arg2;
- (void)_pickerTableViewDidChangeContentOffset:(id)arg1;
- (BOOL)_pointLiesWithinEffectiveTableBounds:(struct CGPoint { double x1; double x2; })arg1;
- (id)_preferredTable;
- (BOOL)_scrollRowAtIndexPathToSelectionBar:(id)arg1 animated:(BOOL)arg2;
- (void)_sendCheckedRow:(int)arg1 inTableView:(id)arg2 checked:(BOOL)arg3;
- (void)_setTextColor:(id)arg1;
- (BOOL)_soundsEnabled;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_tableFrame;
- (id)_textColor;
- (struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })_transformForTableWithPerspectiveTranslationX:(float)arg1;
- (struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })_transformForTableWithTranslationX:(float)arg1;
- (BOOL)_usesCheckSelection;
- (id)_visibleCellClosestToPoint:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_visibleGlobalRows;
- (void)beginUpdates;
- (id)cellForRowAtIndexPath:(id)arg1;
- (void)endUpdates;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 tableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 middleBarHeight:(float)arg3 rowHeight:(float)arg4 pickerView:(id)arg5 transform:(struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })arg6;
- (BOOL)isNoLongerInUse;
- (BOOL)isRowChecked:(int)arg1;
- (float)leftHitTestExtension;
- (void)markAsNoLongerInUse;
- (int)numberOfRowsInSection:(int)arg1;
- (struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })perspectiveTransform;
- (void)pickerTableView:(id)arg1 didChangeSelectionBarRowFrom:(int)arg2 to:(int)arg3;
- (void)reloadData;
- (float)rightHitTestExtension;
- (float)rowHeight;
- (BOOL)selectRow:(int)arg1 animated:(BOOL)arg2 notify:(BOOL)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionBarRect;
- (int)selectionBarRow;
- (void)setAllowsMultipleSelection:(BOOL)arg1;
- (void)setIsNoLongerInUse:(BOOL)arg1;
- (void)setLeftHitTestExtension:(float)arg1;
- (void)setPerspectiveTransform:(struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })arg1;
- (void)setRightHitTestExtension:(float)arg1;
- (void)setRowHeight:(float)arg1;
- (void)setSelectionBarRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (int)tableView:(id)arg1 numberOfRowsInSection:(int)arg2;

@end
