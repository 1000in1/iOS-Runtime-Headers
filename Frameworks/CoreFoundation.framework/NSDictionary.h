/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@interface NSDictionary : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration> {
}

@property(readonly) unsigned short fileHFSFlags;
@property(readonly) unsigned long long fileHFSResourceForkSize;

+ (id)SLDictionaryWithOAuthAccessTokenResponseData:(id)arg1;
+ (id)_dictionaryWithData:(id)arg1 isPlist:(BOOL)arg2 allowedClasses:(id)arg3;
+ (id)_geo_dictionaryFromXPCObject:(id)arg1;
+ (id)_gkDictionaryWithFormEncodedString:(id)arg1;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)dictionary;
+ (id)dictionaryByInvertingDictionary:(id)arg1;
+ (id)dictionaryWithArchiveData:(id)arg1 allowedClasses:(id)arg2;
+ (id)dictionaryWithArchiveData:(id)arg1;
+ (id)dictionaryWithContentsOfFile:(id)arg1;
+ (id)dictionaryWithContentsOfURL:(id)arg1;
+ (id)dictionaryWithDictionary:(id)arg1 copyItems:(BOOL)arg2;
+ (id)dictionaryWithDictionary:(id)arg1;
+ (id)dictionaryWithKeyArray:(id)arg1 defaultValue:(id)arg2;
+ (id)dictionaryWithObject:(id)arg1 forKey:(id)arg2;
+ (id)dictionaryWithObjects:(const id*)arg1 forKeys:(const id*)arg2 count:(unsigned int)arg3;
+ (id)dictionaryWithObjects:(id)arg1 forKeys:(id)arg2;
+ (id)dictionaryWithObjectsAndKeys:(id)arg1;
+ (id)dictionaryWithParametersInURLString:(id)arg1;
+ (id)dictionaryWithPlistData:(id)arg1;
+ (id)newDictionaryWithObjects:(const id*)arg1 forKeys:(const id*)arg2 count:(unsigned int)arg3;
+ (id)newWithContentsOf:(id)arg1 immutable:(BOOL)arg2;
+ (id)sharedKeySetForKeys:(id)arg1;
+ (BOOL)supportsSecureCoding;
+ (BOOL)supportsSecureCoding;

- (struct KeyValueArray { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; unsigned int x3; struct Object {} *x4[1]; }*)CA_copyRenderKeyValueArray;
- (id)CAMLType;
- (id)CDVMergeOverrideDictionary:(id)arg1;
- (id)CDVObjectForKeyCaseInsensitive:(id)arg1;
- (id)CDVObjectForKeyWithNameSpace:(id)arg1 andName:(id)arg2;
- (id)DAMergeOverrideDictionary:(id)arg1;
- (id)DAObjectForKeyCaseInsensitive:(id)arg1;
- (id)MCDeepCopy;
- (id)MCDeepCopyWithZone:(struct _NSZone { }*)arg1;
- (id)MCMutableDeepCopy;
- (id)MCMutableDeepCopyWithZone:(struct _NSZone { }*)arg1;
- (id)MCRetainOptionalNonZeroLengthStringKey:(id)arg1 errorDomain:(id)arg2 invalidDataCode:(int)arg3 invalidDataErrorString:(id)arg4 outError:(id*)arg5;
- (id)MCRetainOptionalObjectKey:(id)arg1 type:(Class)arg2 errorDomain:(id)arg3 invalidDataCode:(int)arg4 invalidDataErrorString:(id)arg5 outError:(id*)arg6;
- (id)MCRetainRequiredNonZeroLengthStringKey:(id)arg1 errorDomain:(id)arg2 missingDataCode:(int)arg3 missingDataErrorString:(id)arg4 invalidDataCode:(int)arg5 invalidDataErrorString:(id)arg6 outError:(id*)arg7;
- (id)MCRetainRequiredObjectKey:(id)arg1 type:(Class)arg2 errorDomain:(id)arg3 missingDataCode:(int)arg4 missingDataErrorString:(id)arg5 invalidDataCode:(int)arg6 invalidDataErrorString:(id)arg7 outError:(id*)arg8;
- (id)ML3StringForKey:(id)arg1;
- (BOOL)MR_isEqualToDictionary:(id)arg1;
- (id)MSASAlbumResetSyncAlbumGUID;
- (id)MSASEventIsDueToAlbumDeletionAlbumGUID;
- (id)MSASEventIsDueToAssetCollectionDeletionAssetCollectionGUID;
- (BOOL)MSASIsErrorRecovery;
- (BOOL)MSASIsGlobalResetSync;
- (BOOL)MSASIsLocalChange;
- (BOOL)MSASIsNotInteresting;
- (id)MSDeepCopy;
- (id)MSDeepCopyWithZone:(struct _NSZone { }*)arg1;
- (id)MSMutableDeepCopy;
- (id)MSMutableDeepCopyWithZone:(struct _NSZone { }*)arg1;
- (id)PKArrayContaining:(Class)arg1 forKey:(id)arg2;
- (id)PKArrayForKey:(id)arg1;
- (BOOL)PKBoolForKey:(id)arg1;
- (id)PKColorForKey:(id)arg1;
- (id)PKDateForKey:(id)arg1;
- (id)PKDictionaryForKey:(id)arg1;
- (double)PKDoubleForKey:(id)arg1;
- (int)PKIntegerForKey:(id)arg1;
- (id)PKNumberForKey:(id)arg1;
- (id)PKSetContaining:(Class)arg1 forKey:(id)arg2;
- (id)PKSetForKey:(id)arg1;
- (id)PKStringForKey:(id)arg1;
- (id)PKURLForKey:(id)arg1;
- (id)PKUUIDForKey:(id)arg1;
- (id)_FTFilteredDictionaryForAPS;
- (void)__apply:(int (*)())arg1 context:(void*)arg2;
- (id)__ftreg_candidateAliases;
- (BOOL)__ftreg_isValidSetupDictionary;
- (id)__ftreg_responseAppleID;
- (id)__ftreg_responseAuthToken;
- (BOOL)__ftreg_responseIsUpgrade;
- (id)__ftreg_responseProfileID;
- (BOOL)__getValue:(id*)arg1 forKey:(id)arg2;
- (id)__imDeepCopy;
- (BOOL)__imIsMutable;
- (id)_arrayForKey:(id)arg1;
- (BOOL)_boolForKey:(id)arg1;
- (unsigned long)_cfTypeID;
- (id)_dataForKey:(id)arg1;
- (id)_dictionaryForKey:(id)arg1;
- (id)_geo_newXPCObject;
- (id)_gkDictionaryByRemovingObjectForKey:(id)arg1;
- (id)_gkDictionaryByRemovingObjectsForKeys:(id)arg1;
- (id)_gkImageURLForSize:(int)arg1 foundSize:(out unsigned int*)arg2;
- (id)_gkImageURLForSize:(int)arg1;
- (id)_gkSubDictionaryWithKeys:(id)arg1 mappedToNewKeys:(id)arg2;
- (id)_gkSubDictionaryWithKeys:(id)arg1;
- (BOOL)_mapkit_writeBinaryPlist:(id)arg1 atomically:(BOOL)arg2;
- (id)_numberForKey:(id)arg1;
- (id)_placeOrCurrentLocation:(BOOL*)arg1;
- (id)_sa_mappedDictionaryWithBlock:(id)arg1;
- (id)_stringForKey:(id)arg1;
- (id)_stringToWrite;
- (id)_ui_attributesForDictionaryContainingUIStringDrawingKeys;
- (BOOL)_ui_dictionaryContainsUIStringDrawingKeys;
- (int)_web_intForKey:(id)arg1;
- (int)_web_messageLineNumber;
- (id)_web_messageSourceURL;
- (id)_web_messageText;
- (int)_web_messageType;
- (id)_web_numberForKey:(id)arg1;
- (id)_web_objectForMIMEType:(id)arg1;
- (id)_web_stringForKey:(id)arg1;
- (id)_webkit_arrayForKey:(id)arg1;
- (BOOL)_webkit_boolForKey:(id)arg1;
- (int)_webkit_intForKey:(id)arg1;
- (id)_webkit_numberForKey:(id)arg1;
- (id)_webkit_objectForMIMEType:(id)arg1;
- (id)_webkit_stringForKey:(id)arg1;
- (int)abCompare:(id)arg1;
- (id)allKeys;
- (id)allKeysForObject:(id)arg1;
- (id)allObjects;
- (id)allValues;
- (void)appendJsonStringToString:(id)arg1;
- (void)appendJsonStringToString:(id)arg1;
- (id)archiveData;
- (id)asQueryParameterString;
- (id)bks_safeObjectForKey:(id)arg1 ofType:(Class)arg2;
- (BOOL)boolValueForKey:(id)arg1;
- (BOOL)boolValueForKey:(id)arg1;
- (Class)classForCoder;
- (BOOL)containsKey:(id)arg1;
- (BOOL)containsObject:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned int)count;
- (unsigned int)countByEnumeratingWithState:(struct { unsigned long x1; id *x2; unsigned long *x3; unsigned long x4[5]; }*)arg1 objects:(id*)arg2 count:(unsigned int)arg3;
- (unsigned int)countForKey:(id)arg1;
- (unsigned int)countForObject:(id)arg1;
- (id)deepCopy;
- (id)description;
- (id)descriptionInStringsFileFormat;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned int)arg2;
- (id)descriptionWithLocale:(id)arg1;
- (id)dictionaryFromChanges:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateKeysAndObjectsUsingBlock:(id)arg1;
- (void)enumerateKeysAndObjectsWithOptions:(unsigned int)arg1 usingBlock:(id)arg2;
- (id)fileCreationDate;
- (BOOL)fileExtensionHidden;
- (id)fileGroupOwnerAccountID;
- (id)fileGroupOwnerAccountName;
- (unsigned int)fileGroupOwnerAccountNumber;
- (unsigned long)fileHFSCreatorCode;
- (unsigned short)fileHFSFlags;
- (unsigned long long)fileHFSResourceForkSize;
- (unsigned long)fileHFSTypeCode;
- (BOOL)fileIsAppendOnly;
- (BOOL)fileIsImmutable;
- (id)fileModificationDate;
- (id)fileOwnerAccountID;
- (id)fileOwnerAccountName;
- (unsigned int)fileOwnerAccountNumber;
- (unsigned int)filePosixPermissions;
- (unsigned long long)fileSize;
- (unsigned int)fileSystemFileNumber;
- (int)fileSystemNumber;
- (id)fileType;
- (void)getKeys:(id*)arg1;
- (void)getObjects:(id*)arg1 andKeys:(id*)arg2 count:(unsigned int)arg3;
- (void)getObjects:(id*)arg1 andKeys:(id*)arg2;
- (void)getObjects:(id*)arg1;
- (id)gksDeepMutableCopy;
- (unsigned int)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithDictionary:(id)arg1 copyItems:(BOOL)arg2;
- (id)initWithDictionary:(id)arg1;
- (id)initWithObject:(id)arg1 forKey:(id)arg2;
- (id)initWithObjects:(const id*)arg1 forKeys:(const id*)arg2 count:(unsigned int)arg3;
- (id)initWithObjects:(id)arg1 forKeys:(id)arg2;
- (id)initWithObjectsAndKeys:(id)arg1;
- (id)invertedDictionary;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToDictionary:(id)arg1;
- (BOOL)isNSDictionary__;
- (int)iterations;
- (id)keyEnumerator;
- (id)keyOfEntryPassingTest:(id)arg1;
- (id)keyOfEntryWithOptions:(unsigned int)arg1 passingTest:(id)arg2;
- (id)keysOfChangedEntriesComparedTo:(id)arg1;
- (id)keysOfEntriesPassingTest:(id)arg1;
- (id)keysOfEntriesWithOptions:(unsigned int)arg1 passingTest:(id)arg2;
- (id)keysSortedByValueUsingComparator:(id)arg1;
- (id)keysSortedByValueUsingSelector:(SEL)arg1;
- (id)keysSortedByValueWithOptions:(unsigned int)arg1 usingComparator:(id)arg2;
- (BOOL)matchesUID:(id)arg1;
- (BOOL)mf_boolForKey:(id)arg1;
- (id)mf_filterUsingMap:(id)arg1 inverse:(BOOL)arg2;
- (int)mf_integerForKey:(id)arg1;
- (id)mutableCopyWithElementsCopy;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)mutableDeepAutoreleasedCopy;
- (id)objectEnumerator;
- (id)objectForCFString:(struct __CFString { }*)arg1;
- (id)objectForKey:(id)arg1;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectForNullMarkerForKey:(id)arg1;
- (id)objectOfClass:(Class)arg1 forKey:(id)arg2;
- (id)objectOfClass:(Class)arg1 forKey:(id)arg2;
- (id)objectOrNullMarkerForCFString:(struct __CFString { }*)arg1;
- (id)objectsForKeys:(id)arg1 notFoundMarker:(id)arg2;
- (float)offset;
- (id)plistData;
- (id)replacementObjectForPortCoder:(id)arg1;
- (id)safari_arrayForKey:(id)arg1;
- (BOOL)safari_boolForKey:(id)arg1;
- (id)safari_dataForKey:(id)arg1;
- (id)safari_dateForKey:(id)arg1;
- (id)safari_dictionaryForKey:(id)arg1;
- (id)safari_numberForKey:(id)arg1;
- (id)safari_stringForKey:(id)arg1;
- (id)safeObjectForKey:(id)arg1 ofClass:(Class)arg2;
- (id)sbs_safeObjectForKey:(id)arg1 ofType:(Class)arg2;
- (id)scriptEntry;
- (id)scriptPath;
- (SEL)setupSelector;
- (int)ssidAndBaseNameLocalizedCaseInsensitiveCompare:(id)arg1;
- (int)ssidLocalizedCaseInsensitiveCompare:(id)arg1;
- (SEL)testSelector;
- (id)valueForKey:(id)arg1;
- (id)valueForKeyPath:(id)arg1;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2;
- (BOOL)writeToProtectedFile:(id)arg1 atomically:(BOOL)arg2;
- (BOOL)writeToProtectedFile:(id)arg1 atomically:(BOOL)arg2;
- (BOOL)writeToURL:(id)arg1 atomically:(BOOL)arg2;

@end
